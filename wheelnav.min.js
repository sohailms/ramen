var sliceTransform;
var sliceTransformCustomization;
var colorpalette;
/**
 * @param {(Object|number)} id
 * @param {Function} reposition
 * @param {number} event
 * @param {number} data
 * @return {?}
 */
wheelnav = function(id, reposition, event, data) {
  var root;
  var w;
  var s;
  var elements;
  var j;
  if (this.holderId = "wheel", id !== undefined && (id !== null && (this.holderId = id)), root = document.getElementById(id), (root === null || root === undefined) && (reposition === undefined || reposition === null)) {
    return this;
  }
  if (s = true, reposition === undefined || reposition === null) {
    /** @type {Array} */
    elements = [];
    /** @type {number} */
    j = 0;
    for (;j < root.children.length;j++) {
      if (root.children[j].localName === "svg") {
        elements.push(root.children[j]);
      }
    }
    /** @type {number} */
    j = 0;
    for (;j < elements.length;j++) {
      root.removeChild(elements[j]);
    }
    if (event !== undefined && event !== null) {
      if (data === undefined || data === null) {
        /** @type {number} */
        data = event;
      }
      this.raphael = new Raphael(id, event, data);
      /** @type {number} */
      w = event;
    } else {
      this.raphael = new Raphael(id);
      /** @type {number} */
      w = root.clientWidth;
    }
    this.raphael.setViewBox(0, 0, this.raphael.width, this.raphael.height, true);
  } else {
    /** @type {Function} */
    this.raphael = reposition;
    w = this.raphael.width;
    /** @type {boolean} */
    s = false;
  }
  return this.centerX = w / 2, this.centerY = w / 2, this.wheelRadius = w / 2, this.navAngle = 0, this.sliceAngle = null, this.titleRotateAngle = null, this.initTitleRotate = false, this.clickModeRotate = true, this.rotateRound = false, this.rotateRoundCount = 0, this.clickModeSpreadOff = false, this.animatetimeCalculated = false, this.animateRepeatCount = 0, this.clockwise = true, this.multiSelect = false, this.hoverPercent = 1, this.selectedPercent = 1, this.clickablePercentMin = 0, this.clickablePercentMax = 
  1, this.currentPercent = null, this.cssMode = false, this.selectedToFront = true, this.selectedNavItemIndex = 0, this.navItemCount = 0, this.navItemCountLabeled = false, this.navItemCountLabelOffset = 0, this.navItems = [], this.navItemsEnabled = true, this.animateFinishFunction = null, this.navItemsContinuous = false, this.navItemsCentered = true, this.colors = colorpalette.defaultpalette, this.titleSpreadScale = null, this.spreaderEnable = false, this.spreaderRadius = 20, this.spreaderStartAngle = 
  0, this.spreaderSliceAngle = 360, this.spreaderPathFunction = spreaderPath().PieSpreader, this.spreaderPathCustom = null, this.spreaderInPercent = 1, this.spreaderOutPercent = 1, this.spreaderInTitle = "+", this.spreaderOutTitle = "-", this.spreaderTitleFont = null, this.spreaderPathInAttr = null, this.spreaderPathOutAttr = null, this.spreaderTitleInAttr = null, this.spreaderTitleOutAttr = null, this.spreaderInTitleWidth = null, this.spreaderInTitleHeight = null, this.spreaderOutTitleWidth = null, 
  this.spreaderOutTitleHeight = null, this.minPercent = 0.01, this.maxPercent = 1, this.initPercent = 1, this.markerEnable = false, this.markerPathFunction = markerPath().TriangleMarker, this.markerPathCustom = null, this.currentClick = 0, this.animateLocked = false, this.slicePathAttr = null, this.sliceHoverAttr = null, this.sliceSelectedAttr = null, this.titleAttr = null, this.titleHoverAttr = null, this.titleSelectedAttr = null, this.titleWidth = null, this.titleHeight = null, this.titleHoverWidth = 
  null, this.titleHoverHeight = null, this.titleSelectedWidth = null, this.titleSelectedHeight = null, this.linePathAttr = null, this.lineHoverAttr = null, this.lineSelectedAttr = null, this.slicePathCustom = null, this.sliceClickablePathCustom = null, this.sliceSelectedPathCustom = null, this.sliceHoverPathCustom = null, this.sliceInitPathCustom = null, this.sliceTransformCustom = null, this.sliceSelectedTransformCustom = null, this.sliceHoverTransformCustom = null, this.sliceInitTransformCustom = 
  null, this.animateeffect = null, this.animatetime = null, this.slicePathFunction = slicePath().PieSlice !== undefined ? slicePath().PieSlice : slicePath().NullSlice, this.sliceClickablePathFunction = null, this.sliceTransformFunction = null, this.sliceSelectedPathFunction = null, this.sliceSelectedTransformFunction = null, this.sliceHoverPathFunction = null, this.sliceHoverTransformFunction = null, this.sliceInitPathFunction = null, this.sliceInitTransformFunction = null, this.keynavigateEnabled = 
  false, this.keynavigateOnlyFocus = false, this.keynavigateDownCode = 37, this.keynavigateDownCodeAlt = 40, this.keynavigateUpCode = 39, this.keynavigateUpCodeAlt = 38, this.parseWheel(root), this;
};
/**
 * @param {Array} arg
 * @return {undefined}
 */
wheelnav.prototype.initWheel = function(arg) {
  var copies;
  var expires;
  var i1;
  this.styleWheel();
  if (this.navItemCount === 0) {
    if (!(arg !== undefined && (arg !== null && Array.isArray(arg)))) {
      /** @type {Array} */
      arg = ["title-0", "title-1", "title-2", "title-3"];
    }
    this.navItemCount = arg.length;
  } else {
    /** @type {null} */
    arg = null;
  }
  /** @type {number} */
  i = 0;
  for (;i < this.navItemCount;i++) {
    /** @type {string} */
    expires = "";
    expires = this.navItemCountLabeled ? (i + this.navItemCountLabelOffset).toString() : arg !== null ? arg[i] : "";
    copies = new wheelnavItem(this, expires, i);
    this.navItems.push(copies);
  }
  /** @type {number} */
  i1 = 0;
  /** @type {number} */
  i = 0;
  for (;i < this.navItems.length;i++) {
    this.navItems[i].fillAttr = this.colors[i1];
    i1++;
    if (i1 === this.colors.length) {
      /** @type {number} */
      i1 = 0;
    }
  }
};
/**
 * @param {Object} until
 * @param {?} x
 * @return {?}
 */
wheelnav.prototype.createWheel = function(until, x) {
  if (this.currentPercent === null) {
    this.currentPercent = x ? this.minPercent : this.maxPercent;
  }
  if (this.navItems.length === 0) {
    this.initWheel(until);
  }
  if (this.selectedNavItemIndex !== null) {
    /** @type {boolean} */
    this.navItems[this.selectedNavItemIndex].selected = true;
  }
  /** @type {number} */
  i = 0;
  for (;i < this.navItemCount;i++) {
    this.navItems[i].createNavItem();
  }
  if (this.keynavigateEnabled) {
    var scope = this;
    /** @type {Window} */
    var elem = window;
    if (this.keynavigateOnlyFocus) {
      /** @type {(HTMLElement|null)} */
      elem = document.getElementById(this.holderId);
      if (!elem.hasAttribute("tabindex")) {
        elem.setAttribute("tabindex", 0);
      }
    }
    elem.addEventListener("keydown", this.keyNavigateFunction = function(event) {
      var newVal;
      var i;
      event = event || window.e;
      newVal = event.which || event.keyCode;
      if ([scope.keynavigateDownCode, scope.keynavigateDownCodeAlt, scope.keynavigateUpCode, scope.keynavigateUpCodeAlt].indexOf(event.keyCode) > -1) {
        event.preventDefault();
      }
      /** @type {null} */
      i = null;
      if (newVal === scope.keynavigateUpCode || newVal === scope.keynavigateUpCodeAlt) {
        i = scope.currentClick === scope.navItemCount - 1 ? 0 : scope.currentClick + 1;
      }
      if (newVal === scope.keynavigateDownCode || newVal === scope.keynavigateDownCodeAlt) {
        /** @type {number} */
        i = scope.currentClick === 0 ? scope.navItemCount - 1 : scope.currentClick - 1;
      }
      if (i !== null) {
        if (scope.navItems[i].navigateFunction !== null) {
          scope.navItems[i].navigateFunction();
        }
        scope.navigateWheel(i);
      }
    });
  }
  return this.spreader = new spreader(this), this.marker = new marker(this), this.refreshWheel(), x !== undefined && this.spreadWheel(), this;
};
/**
 * @return {undefined}
 */
wheelnav.prototype.removeWheel = function() {
  if (this.raphael.remove(), this.keynavigateEnabled) {
    /** @type {Window} */
    var elem = window;
    if (this.keynavigateOnlyFocus) {
      /** @type {(HTMLElement|null)} */
      elem = document.getElementById(this.holderId);
      if (elem.hasAttribute("tabindex")) {
        elem.removeAttribute("tabindex");
      }
    }
    elem.removeEventListener("keydown", this.keyNavigateFunction);
  }
};
/**
 * @param {boolean} recurring
 * @return {undefined}
 */
wheelnav.prototype.refreshWheel = function(recurring) {
  /** @type {number} */
  i = 0;
  for (;i < this.navItemCount;i++) {
    var seg = this.navItems[i];
    seg.setWheelSettings(recurring);
    seg.refreshNavItem(recurring);
  }
  this.marker.setCurrentTransform();
  this.spreader.setCurrentTransform();
};
/**
 * @param {(number|string)} uuid
 * @return {undefined}
 */
wheelnav.prototype.navigateWheel = function(uuid) {
  var option;
  var seconds;
  var animatetime;
  this.animateUnlock(true);
  if (this.clickModeRotate) {
    /** @type {boolean} */
    this.animateLocked = true;
  }
  /** @type {number} */
  i = 0;
  for (;i < this.navItemCount;i++) {
    option = this.navItems[i];
    /** @type {boolean} */
    option.hovered = false;
    if (i === uuid) {
      if (this.multiSelect) {
        /** @type {boolean} */
        option.selected = !option.selected;
      } else {
        /** @type {boolean} */
        option.selected = true;
        this.selectedNavItemIndex = i;
      }
    } else {
      if (!this.multiSelect) {
        /** @type {boolean} */
        option.selected = false;
      }
    }
    if (this.clickModeRotate) {
      /** @type {number} */
      seconds = this.navItems[uuid].navAngle - this.navItems[this.currentClick].navAngle;
      if (this.rotateRound) {
        if (this.clockwise) {
          if (seconds < 0) {
            /** @type {number} */
            seconds = 360 + seconds;
          }
        }
        if (!this.clockwise) {
          if (seconds > 0) {
            /** @type {number} */
            seconds = seconds - 360;
          }
        }
      }
      option.currentRotateAngle -= seconds;
      animatetime = this.animatetime != null ? this.animatetime : 1500;
      if (this.animatetimeCalculated) {
        if (uuid !== this.currentClick) {
          /** @type {number} */
          option.animatetime = animatetime * (Math.abs(seconds) / 360);
        }
      }
      if (this.rotateRoundCount > 0) {
        if (this.clockwise) {
          option.currentRotateAngle -= this.rotateRoundCount * 360;
        } else {
          option.currentRotateAngle += this.rotateRoundCount * 360;
        }
        /** @type {number} */
        option.animatetime = animatetime * (this.rotateRoundCount + 1);
      }
    }
  }
  /** @type {number} */
  i = 0;
  for (;i < this.navItemCount;i++) {
    option = this.navItems[i];
    option.setCurrentTransform(true, true);
    option.refreshNavItem();
  }
  /** @type {(number|string)} */
  this.currentClick = uuid;
  if (this.clickModeSpreadOff) {
    this.currentPercent = this.maxPercent;
    this.spreadWheel();
  } else {
    if (uuid === null || this.clickModeRotate) {
      this.marker.setCurrentTransform();
    } else {
      this.marker.setCurrentTransform(this.navItems[this.currentClick].navAngle);
    }
    this.spreader.setCurrentTransform(true);
  }
};
/**
 * @return {?}
 */
wheelnav.prototype.spreadWheel = function() {
  this.animateUnlock(true);
  /** @type {boolean} */
  this.animateLocked = true;
  this.currentPercent = this.currentPercent === this.maxPercent || this.currentPercent === null ? this.minPercent : this.maxPercent;
  /** @type {number} */
  i = 0;
  for (;i < this.navItemCount;i++) {
    var scope = this.navItems[i];
    /** @type {boolean} */
    scope.hovered = false;
    scope.setCurrentTransform(true, false);
  }
  return this.marker.setCurrentTransform(), this.spreader.setCurrentTransform(), this;
};
/**
 * @param {boolean} recurring
 * @param {boolean} opt_isDefault
 * @return {undefined}
 */
wheelnav.prototype.animateUnlock = function(recurring, opt_isDefault) {
  var unlock;
  var frontName;
  if (recurring !== undefined && recurring === true) {
    /** @type {number} */
    unlock = 0;
    for (;unlock < this.navItemCount;unlock++) {
      /** @type {boolean} */
      this.navItems[unlock].navSliceUnderAnimation = false;
      /** @type {boolean} */
      this.navItems[unlock].navTitleUnderAnimation = false;
      /** @type {boolean} */
      this.navItems[unlock].navLineUnderAnimation = false;
      this.navItems[unlock].navSlice.stop();
      this.navItems[unlock].navLine.stop();
      this.navItems[unlock].navTitle.stop();
    }
  } else {
    /** @type {number} */
    frontName = 0;
    for (;frontName < this.navItemCount;frontName++) {
      if (this.navItems[frontName].navSliceUnderAnimation === true || (this.navItems[frontName].navTitleUnderAnimation === true || this.navItems[frontName].navLineUnderAnimation === true)) {
        return;
      }
    }
    /** @type {boolean} */
    this.animateLocked = false;
    if (this.animateFinishFunction !== null) {
      if (opt_isDefault !== undefined) {
        if (opt_isDefault === true) {
          this.animateFinishFunction();
        }
      }
    }
  }
};
/**
 * @param {Array} ca
 * @return {undefined}
 */
wheelnav.prototype.setTooltips = function(ca) {
  if (ca !== undefined && (ca !== null && (Array.isArray(ca) && ca.length <= this.navItems.length))) {
    /** @type {number} */
    var i = 0;
    for (;i < ca.length;i++) {
      this.navItems[i].setTooltip(ca[i]);
    }
  }
};
/**
 * @param {string} i
 * @return {?}
 */
wheelnav.prototype.getItemId = function(i) {
  return "wheelnav-" + this.holderId + "-item-" + i;
};
/**
 * @param {string} dataAndEvents
 * @return {?}
 */
wheelnav.prototype.getSliceId = function(dataAndEvents) {
  return "wheelnav-" + this.holderId + "-slice-" + dataAndEvents;
};
/**
 * @param {string} dataAndEvents
 * @return {?}
 */
wheelnav.prototype.getClickableSliceId = function(dataAndEvents) {
  return "wheelnav-" + this.holderId + "-clickableslice-" + dataAndEvents;
};
/**
 * @param {string} index
 * @return {?}
 */
wheelnav.prototype.getTitleId = function(index) {
  return "wheelnav-" + this.holderId + "-title-" + index;
};
/**
 * @param {string} i
 * @return {?}
 */
wheelnav.prototype.getLineId = function(i) {
  return "wheelnav-" + this.holderId + "-line-" + i;
};
/**
 * @return {?}
 */
wheelnav.prototype.getSpreaderId = function() {
  return "wheelnav-" + this.holderId + "-spreader";
};
/**
 * @return {?}
 */
wheelnav.prototype.getSpreaderTitleId = function() {
  return "wheelnav-" + this.holderId + "-spreadertitle";
};
/**
 * @return {?}
 */
wheelnav.prototype.getMarkerId = function() {
  return "wheelnav-" + this.holderId + "-marker";
};
/**
 * @param {Object} item
 * @return {undefined}
 */
wheelnav.prototype.parseWheel = function(item) {
  var tmp;
  var uHostName;
  var fromIndex;
  var sizeAsString;
  var data_wheelnav_rotateoff;
  var data_wheelnav_cssmode;
  var data_wheelnav_spreader;
  var dayOfWeek;
  var prefixedStyle;
  var data_wheelnav_marker;
  var conditionIndex;
  var dayofweek;
  var formula;
  var data_wheelnav_keynav;
  var data_wheelnav_keynavonlyfocus;
  var week;
  var r;
  var highest;
  var ttl;
  var data_wheelnav_init;
  var lt;
  var x;
  var items;
  var j;
  if (item !== undefined && item !== null) {
    if (tmp = item.hasAttribute("data-wheelnav"), tmp) {
      /** @type {Array} */
      var matched = [];
      /** @type {Array} */
      var urls = [];
      /** @type {Array} */
      var htmlClasses = [];
      /** @type {boolean} */
      var rt = false;
      var idProperty = item.getAttribute("data-wheelnav-slicepath");
      if (idProperty !== null) {
        if (slicePath()[idProperty] !== undefined) {
          this.slicePathFunction = slicePath()[idProperty];
        }
      }
      uHostName = item.getAttribute("data-wheelnav-colors");
      if (uHostName !== null) {
        this.colors = uHostName.split(",");
      }
      fromIndex = item.getAttribute("data-wheelnav-wheelradius");
      if (fromIndex !== null) {
        /** @type {number} */
        this.wheelRadius = Number(fromIndex);
      }
      sizeAsString = item.getAttribute("data-wheelnav-navangle");
      if (sizeAsString !== null) {
        /** @type {number} */
        this.navAngle = Number(sizeAsString);
      }
      data_wheelnav_rotateoff = item.getAttribute("data-wheelnav-rotateoff");
      if (data_wheelnav_rotateoff !== null) {
        /** @type {boolean} */
        this.clickModeRotate = false;
      }
      data_wheelnav_cssmode = item.getAttribute("data-wheelnav-cssmode");
      if (data_wheelnav_cssmode !== null) {
        /** @type {boolean} */
        this.cssMode = true;
      }
      data_wheelnav_spreader = item.getAttribute("data-wheelnav-spreader");
      if (data_wheelnav_spreader !== null) {
        /** @type {boolean} */
        this.spreaderEnable = true;
      }
      dayOfWeek = item.getAttribute("data-wheelnav-spreaderradius");
      if (dayOfWeek !== null) {
        /** @type {number} */
        this.spreaderRadius = Number(dayOfWeek);
      }
      prefixedStyle = item.getAttribute("data-wheelnav-spreaderpath");
      if (prefixedStyle !== null) {
        if (markerPath()[prefixedStyle] !== undefined) {
          this.spreaderPathFunction = spreaderPath()[prefixedStyle];
        }
      }
      data_wheelnav_marker = item.getAttribute("data-wheelnav-marker");
      if (data_wheelnav_marker !== null) {
        /** @type {boolean} */
        this.markerEnable = true;
      }
      conditionIndex = item.getAttribute("data-wheelnav-markerpath");
      if (conditionIndex !== null) {
        if (markerPath()[conditionIndex] !== undefined) {
          this.markerPathFunction = markerPath()[conditionIndex];
        }
      }
      dayofweek = item.getAttribute("data-wheelnav-titlewidth");
      if (dayofweek !== null) {
        /** @type {number} */
        this.titleWidth = Number(dayofweek);
      }
      formula = item.getAttribute("data-wheelnav-titleheight");
      if (formula !== null) {
        /** @type {number} */
        this.titleHeight = Number(formula);
      }
      data_wheelnav_keynav = item.getAttribute("data-wheelnav-keynav");
      if (data_wheelnav_keynav !== null) {
        /** @type {boolean} */
        this.keynavigateEnabled = true;
      }
      data_wheelnav_keynavonlyfocus = item.getAttribute("data-wheelnav-keynavonlyfocus");
      if (data_wheelnav_keynavonlyfocus !== null) {
        /** @type {boolean} */
        this.keynavigateOnlyFocus = true;
      }
      week = item.getAttribute("data-wheelnav-keynavdowncode");
      if (week !== null) {
        /** @type {number} */
        this.keynavigateDownCode = Number(week);
      }
      r = item.getAttribute("data-wheelnav-keynavdowncodealt");
      if (r !== null) {
        /** @type {number} */
        this.keynavigateDownCodeAlt = Number(r);
      }
      highest = item.getAttribute("data-wheelnav-keynavupcode");
      if (highest !== null) {
        /** @type {number} */
        this.keynavigateUpCode = Number(highest);
      }
      ttl = item.getAttribute("data-wheelnav-keynavupcodealt");
      if (ttl !== null) {
        /** @type {number} */
        this.keynavigateUpCodeAlt = Number(ttl);
      }
      data_wheelnav_init = item.getAttribute("data-wheelnav-init");
      if (data_wheelnav_init !== null) {
        /** @type {boolean} */
        rt = true;
      }
      /** @type {number} */
      j = 0;
      for (;j < item.children.length;j++) {
        var cur = item.children[j].getAttribute("data-wheelnav-navitemtext");
        var i = item.children[j].getAttribute("data-wheelnav-navitemicon");
        var dirOrig = item.children[j].getAttribute("data-wheelnav-navitemimg");
        if (cur !== null || (i !== null || dirOrig !== null)) {
          if (cur !== null) {
            matched.push(cur);
          } else {
            if (i !== null) {
              if (icon[i] !== undefined) {
                matched.push(icon[i]);
              } else {
                matched.push(i);
              }
            } else {
              if (dirOrig !== null) {
                matched.push("imgsrc:" + dirOrig);
              } else {
                continue;
              }
            }
          }
          if (item.children[j].onclick !== undefined) {
            htmlClasses.push(item.children[j].onclick);
          } else {
            htmlClasses.push(null);
          }
          /** @type {boolean} */
          lt = false;
          /** @type {number} */
          x = 0;
          for (;x < item.children[j].children.length;x++) {
            if (item.children[j].children[x].getAttribute("href") !== undefined) {
              urls.push(item.children[j].children[x].getAttribute("href"));
            }
          }
          if (!lt) {
            urls.push(null);
          }
        }
      }
      if (matched.length > 0) {
        this.initWheel(matched);
        /** @type {number} */
        j = 0;
        for (;j < htmlClasses.length;j++) {
          this.navItems[j].navigateFunction = htmlClasses[j];
          this.navItems[j].navigateHref = urls[j];
        }
        if (!rt) {
          this.createWheel();
        }
      }
    }
    /** @type {Array} */
    items = [];
    /** @type {number} */
    j = 0;
    for (;j < item.children.length;j++) {
      if (item.children[j].localName !== "svg") {
        items.push(item.children[j]);
      }
    }
    /** @type {number} */
    j = 0;
    for (;j < items.length;j++) {
      item.removeChild(items[j]);
    }
  }
};
/**
 * @param {Object} settings
 * @param {string} opt_e
 * @param {(number|string)} clockwise
 * @return {?}
 */
wheelnavItem = function(settings, opt_e, clockwise) {
  return this.wheelnav = settings, this.wheelItemIndex = clockwise, this.itemIndex = settings.clockwise ? clockwise : -clockwise, this.enabled = settings.navItemsEnabled, this.selected = false, this.hovered = false, this.navItem = null, this.navSlice = null, this.navTitle = null, this.navLine = null, this.navClickableSlice = null, this.navSliceCurrentTransformString = null, this.navTitleCurrentTransformString = null, this.navLineCurrentTransformString = null, this.navSliceUnderAnimation = false, 
  this.navTitleUnderAnimation = false, this.navLineUnderAnimation = false, this.currentRotateAngle = 0, this.setTitle(opt_e), this.tooltip = null, this.fillAttr = "#CCC", this.titleFont = this.wheelnav.titleFont, this.navigateHref = null, this.navigateFunction = null, this.titleWidth = null, this.titleHeight = null, this.titleHoverWidth = null, this.titleHoverHeight = null, this.titleSelectedWidth = null, this.titleSelectedHeight = null, this.animateeffect = null, this.animatetime = null, this.sliceInitPathFunction = 
  null, this.sliceClickablePathFunction = null, this.slicePathFunction = null, this.sliceSelectedPathFunction = null, this.sliceHoverPathFunction = null, this.sliceTransformFunction = null, this.sliceSelectedTransformFunction = null, this.sliceHoverTransformFunction = null, this.sliceInitTransformFunction = null, this.slicePathCustom = null, this.sliceClickablePathCustom = null, this.sliceSelectedPathCustom = null, this.sliceHoverPathCustom = null, this.sliceInitPathCustom = null, this.sliceTransformCustom = 
  null, this.sliceSelectedTransformCustom = null, this.sliceHoverTransformCustom = null, this.sliceInitTransformCustom = null, this.initPercent = null, this.minPercent = null, this.maxPercent = null, this.hoverPercent = null, this.selectedPercent = null, this.clickablePercentMin = null, this.clickablePercentMax = null, this.titleSpreadScale = null, this.sliceAngle = null, this.styleNavItem(), this;
};
/**
 * @return {undefined}
 */
wheelnavItem.prototype.createNavItem = function() {
  var unlock;
  var itemIndex;
  var data;
  var self;
  var path;
  this.setWheelSettings(false);
  if (this.navigateHref !== null) {
    /**
     * @return {undefined}
     */
    this.navigateFunction = function() {
      window.location.href = this.navigateHref;
    };
  }
  if (!this.wheelnav.cssMode) {
    this.slicePathAttr.fill = this.fillAttr;
    this.sliceHoverAttr.fill = this.fillAttr;
    this.sliceSelectedAttr.fill = this.fillAttr;
  }
  if (!this.enabled) {
    if (!this.wheelnav.cssMode) {
      /** @type {string} */
      this.slicePathAttr.cursor = "default";
      /** @type {string} */
      this.sliceHoverAttr.cursor = "default";
      /** @type {string} */
      this.titleAttr.cursor = "default";
      /** @type {string} */
      this.titleHoverAttr.cursor = "default";
      /** @type {string} */
      this.linePathAttr.cursor = "default";
      /** @type {string} */
      this.lineHoverAttr.cursor = "default";
    }
    /** @type {string} */
    this.sliceClickablePathAttr.cursor = "default";
    /** @type {string} */
    this.sliceClickableHoverAttr.cursor = "default";
  }
  /** @type {number} */
  unlock = this.wheelItemIndex - 1;
  /** @type {number} */
  itemIndex = 360 / this.wheelnav.navItemCount;
  if (this.sliceAngle === null) {
    /** @type {number} */
    this.sliceAngle = 360 / this.wheelnav.navItemCount;
  }
  if (this.wheelnav.clockwise) {
    if (this.wheelnav.navItemsContinuous) {
      this.baseAngle = this.itemIndex === 0 ? this.itemIndex * this.sliceAngle + (-this.sliceAngle / 2 + this.wheelnav.navAngle) : this.wheelnav.navItems[unlock].baseAngle + this.wheelnav.navItems[unlock].sliceAngle;
    } else {
      if (this.wheelnav.navItemsCentered) {
        this.baseAngle = this.itemIndex * itemIndex + (-this.sliceAngle / 2 + this.wheelnav.navAngle);
      } else {
        this.baseAngle = this.itemIndex * itemIndex + (-itemIndex / 2 + this.wheelnav.navAngle);
        this.currentRotateAngle += itemIndex / 2 - this.wheelnav.navItems[0].sliceAngle / 2;
      }
    }
  } else {
    if (this.wheelnav.navItemsContinuous) {
      this.baseAngle = this.itemIndex === 0 ? this.itemIndex * this.sliceAngle + (-this.sliceAngle / 2 + this.wheelnav.navAngle) : this.wheelnav.navItems[unlock].baseAngle - this.wheelnav.navItems[this.wheelItemIndex].sliceAngle;
    } else {
      if (this.wheelnav.navItemsCentered) {
        this.baseAngle = this.itemIndex * itemIndex + (-this.sliceAngle / 2 + this.wheelnav.navAngle);
      } else {
        this.baseAngle = this.itemIndex * itemIndex + (-itemIndex / 2 + this.wheelnav.navAngle) + (itemIndex - this.sliceAngle);
        this.currentRotateAngle -= itemIndex / 2 - this.wheelnav.navItems[0].sliceAngle / 2;
      }
    }
  }
  this.navAngle = this.baseAngle + this.sliceAngle / 2;
  if (this.wheelnav.animatetimeCalculated) {
    /** @type {number} */
    this.animatetime = this.wheelnav.animatetime / this.wheelnav.navItemCount;
  }
  this.initPathsAndTransforms();
  data = this.sliceInitPath;
  this.navSlice = this.wheelnav.raphael.path(data.slicePathString);
  this.navSlice.attr(this.slicePathAttr);
  this.navSlice.id = this.wheelnav.getSliceId(this.wheelItemIndex);
  this.navSlice.node.id = this.navSlice.id;
  this.navLine = this.wheelnav.raphael.path(data.linePathString);
  this.navLine.attr(this.linePathAttr);
  this.navLine.id = this.wheelnav.getLineId(this.wheelItemIndex);
  this.navLine.node.id = this.navLine.id;
  self = this.initNavTitle;
  this.navTitle = wheelnavTitle().isPathTitle(this.title) ? this.wheelnav.raphael.path(self.path) : wheelnavTitle().isImageTitle(this.title) ? this.wheelnav.raphael.image(self.src, data.titlePosX - this.titleWidth / 2, data.titlePosY - this.titleHeight / 2, this.titleWidth, this.titleHeight) : this.wheelnav.raphael.text(data.titlePosX, data.titlePosY, self.title);
  this.navTitle.attr(this.titleAttr);
  this.navTitle.id = this.wheelnav.getTitleId(this.wheelItemIndex);
  this.navTitle.node.id = this.navTitle.id;
  /** @type {string} */
  this.navSliceCurrentTransformString = "";
  if (this.initTransform.sliceTransformString !== "") {
    this.navSliceCurrentTransformString += this.initTransform.sliceTransformString;
  }
  /** @type {string} */
  this.navLineCurrentTransformString = "";
  if (this.initTransform.lineTransformString !== "") {
    this.navLineCurrentTransformString += this.initTransform.lineTransformString;
  }
  /** @type {string} */
  this.navTitleCurrentTransformString = "";
  this.navTitleCurrentTransformString += this.getTitleRotateString(this.wheelnav.initTitleRotate);
  if (this.initTransform.titleTransformString !== "") {
    this.navTitleCurrentTransformString += this.initTransform.titleTransformString;
  }
  if (this.wheelnav.currentPercent < 0.05) {
    this.navTitleCurrentTransformString += ",s0.05";
  }
  if (this.navTitleSizeTransform !== undefined) {
    this.navTitleCurrentTransformString += this.navTitleSizeTransform;
  }
  this.navSlice.attr({
    transform : this.navSliceCurrentTransformString
  });
  this.navLine.attr({
    transform : this.navLineCurrentTransformString
  });
  this.navTitle.attr({
    transform : this.navTitleCurrentTransformString
  });
  this.navItem = this.wheelnav.raphael.set();
  if (this.sliceClickablePathFunction !== null) {
    path = this.getCurrentClickablePath();
    this.navClickableSlice = this.wheelnav.raphael.path(path.slicePathString).attr(this.sliceClickablePathAttr).toBack();
    this.navClickableSlice.id = this.wheelnav.getClickableSliceId(this.wheelItemIndex);
    this.navClickableSlice.node.id = this.navClickableSlice.id;
    this.navItem.push(this.navSlice, this.navLine, this.navTitle, this.navClickableSlice);
  } else {
    this.navItem.push(this.navSlice, this.navLine, this.navTitle);
  }
  this.setTooltip(this.tooltip);
  this.navItem.id = this.wheelnav.getItemId(this.wheelItemIndex);
  var createdUser = this.wheelnav;
  var that = this;
  var uuid = this.wheelItemIndex;
  if (this.enabled) {
    this.navItem.mouseup(function() {
      if (that.navigateFunction !== null) {
        that.navigateFunction();
      }
      createdUser.navigateWheel(uuid);
    });
    this.navItem.mouseover(function() {
      if (that.hovered !== true) {
        that.hoverEffect(uuid, true);
      }
    });
    this.navItem.mouseout(function() {
      /** @type {boolean} */
      that.hovered = false;
      that.hoverEffect(uuid, false);
    });
  }
  this.setCurrentTransform(true, false);
};
/**
 * @param {?} uuid
 * @param {boolean} recurring
 * @return {undefined}
 */
wheelnavItem.prototype.hoverEffect = function(uuid, recurring) {
  if (this.wheelnav.animateLocked === false) {
    if (recurring) {
      if (!this.selected) {
        /** @type {boolean} */
        this.hovered = true;
      }
    }
    this.refreshNavItem();
    if (this.hoverPercent !== 1 || (this.sliceHoverPathFunction !== null || (this.sliceHoverTransformFunction !== null || (this.titleHover !== this.title || (this.titleHoverWidth !== this.titleWidth || this.titleHoverHeight !== this.titleHeight))))) {
      this.setCurrentTransform(false, false);
    }
    this.wheelnav.marker.setCurrentTransform();
    this.wheelnav.spreader.setCurrentTransform(true);
  }
};
/**
 * @param {boolean} recurring
 * @param {boolean} opt_isDefault
 * @return {undefined}
 */
wheelnavItem.prototype.setCurrentTransform = function(recurring, opt_isDefault) {
  var path;
  var attrs;
  var n;
  var result;
  var easings;
  var obj;
  var data;
  var navSliceUnderAnimation;
  var animateUnlock;
  var tabsize;
  var options;
  var settings;
  var button;
  var axis;
  if (!this.wheelnav.clickModeRotate || !this.navSliceUnderAnimation && (!this.navTitleUnderAnimation && !this.navLineUnderAnimation)) {
    if (recurring !== undefined && (recurring === true && (this.navSliceUnderAnimation = true, this.navTitleUnderAnimation = true, this.navLineUnderAnimation = true)), this.navSliceCurrentTransformString = "", this.wheelnav.clickModeRotate && (this.navSliceCurrentTransformString += this.getItemRotateString()), this.selected ? this.selectTransform.sliceTransformString !== undefined && (this.navSliceCurrentTransformString += this.selectTransform.sliceTransformString) : this.hovered && (this.hoverTransform.sliceTransformString !== 
    undefined && (this.navSliceCurrentTransformString += this.hoverTransform.sliceTransformString)), this.sliceTransform.sliceTransformString !== undefined && (this.navSliceCurrentTransformString += this.sliceTransform.sliceTransformString), this.navLineCurrentTransformString = "", this.wheelnav.clickModeRotate && (this.navLineCurrentTransformString += this.getItemRotateString()), this.selected ? this.selectTransform.lineTransformString !== undefined && (this.navLineCurrentTransformString += this.selectTransform.lineTransformString) : 
    this.hovered && (this.hoverTransform.lineTransformString !== undefined && (this.navLineCurrentTransformString += this.hoverTransform.lineTransformString)), this.sliceTransform.lineTransformString !== undefined && (this.navLineCurrentTransformString += this.sliceTransform.lineTransformString), this.navTitleCurrentTransformString = "", this.navTitleCurrentTransformString += this.getTitleRotateString(true), this.selected ? (this.navTitleSizeSelectedTransform !== undefined && (this.navTitleCurrentTransformString += 
    this.navTitleSizeSelectedTransform), this.navTitleCurrentTransformString += this.selectTransform.titleTransformString === "" || this.selectTransform.titleTransformString === undefined ? ",s1" : "," + this.selectTransform.titleTransformString, this.wheelnav.currentPercent < 0.05 && (this.navTitleCurrentTransformString += ",s0.05")) : this.hovered ? (this.navTitleSizeHoverTransform !== undefined && (this.navTitleCurrentTransformString += this.navTitleSizeHoverTransform), this.navTitleCurrentTransformString += 
    this.hoverTransform.titleTransformString === "" || this.hoverTransform.titleTransformString === undefined ? ",s1" : "," + this.hoverTransform.titleTransformString) : this.wheelnav.currentPercent < 0.05 ? this.navTitleCurrentTransformString += ",s0.05" : this.titleSpreadScale ? this.navTitleCurrentTransformString += ",s" + this.wheelnav.currentPercent : (this.navTitleSizeTransform !== undefined && (this.navTitleCurrentTransformString += this.navTitleSizeTransform), this.navTitleCurrentTransformString += 
    this.sliceTransform.titleTransformString === "" || this.sliceTransform.titleTransformString === undefined ? ",s1" : "," + this.sliceTransform.titleTransformString), path = this.getCurrentPath(), attrs = {}, attrs = {
      path : path.slicePathString,
      transform : this.navSliceCurrentTransformString
    }, n = {}, this.sliceClickablePathFunction !== null && (result = this.getCurrentClickablePath(), n = {
      path : result.slicePathString,
      transform : this.navSliceCurrentTransformString
    }), easings = {}, easings = {
      path : path.linePathString,
      transform : this.navLineCurrentTransformString
    }, obj = this.getCurrentTitle(), data = {}, wheelnavTitle().isPathTitle(obj.title) ? data = {
      path : obj.path,
      transform : this.navTitleCurrentTransformString
    } : wheelnavTitle().isImageTitle(obj.title) ? (data = {
      x : obj.x,
      y : obj.y,
      width : obj.width,
      height : obj.height,
      transform : this.navTitleCurrentTransformString
    }, this.navTitle.attr({
      src : obj.src
    })) : (data = {
      x : obj.x,
      y : obj.y,
      transform : this.navTitleCurrentTransformString
    }, obj.title !== null && this.navTitle.attr({
      text : obj.title
    })), navSliceUnderAnimation = this, animateUnlock = this.wheelnav, this.animSlice = Raphael.animation(attrs, this.animatetime, this.animateeffect, function() {
      /** @type {boolean} */
      navSliceUnderAnimation.navSliceUnderAnimation = false;
      animateUnlock.animateUnlock(false, opt_isDefault);
    }), this.animLine = Raphael.animation(easings, this.animatetime, this.animateeffect, function() {
      /** @type {boolean} */
      navSliceUnderAnimation.navLineUnderAnimation = false;
      animateUnlock.animateUnlock(false, opt_isDefault);
    }), this.animTitle = Raphael.animation(data, this.animatetime, this.animateeffect, function() {
      /** @type {boolean} */
      navSliceUnderAnimation.navTitleUnderAnimation = false;
      animateUnlock.animateUnlock(false, opt_isDefault);
    }), this.navClickableSlice !== null && (this.animClickableSlice = Raphael.animation(n, this.animatetime, this.animateeffect)), tabsize = this.wheelnav.animateRepeatCount, recurring !== undefined && recurring === true) {
      if (this.wheelItemIndex === this.wheelnav.navItemCount - 1) {
        /** @type {number} */
        i = 0;
        for (;i < this.wheelnav.navItemCount;i++) {
          options = this.wheelnav.navItems[i];
          options.navSlice.animate(options.animSlice.repeat(tabsize));
        }
        /** @type {number} */
        i = 0;
        for (;i < this.wheelnav.navItemCount;i++) {
          settings = this.wheelnav.navItems[i];
          settings.navLine.animate(settings.animLine.repeat(tabsize));
        }
        /** @type {number} */
        i = 0;
        for (;i < this.wheelnav.navItemCount;i++) {
          button = this.wheelnav.navItems[i];
          button.navTitle.animate(button.animTitle.repeat(tabsize));
        }
        if (this.wheelnav.sliceClickablePathFunction !== null) {
          /** @type {number} */
          i = 0;
          for (;i < this.wheelnav.navItemCount;i++) {
            axis = this.wheelnav.navItems[i];
            if (axis.navClickableSlice !== null) {
              axis.navClickableSlice.animate(axis.animClickableSlice.repeat(tabsize));
            }
          }
        }
      }
    } else {
      this.navSlice.animate(this.animSlice.repeat(tabsize));
      this.navLine.animate(this.animLine.repeat(tabsize));
      this.navTitle.animate(this.animTitle.repeat(tabsize));
      if (this.navClickableSlice !== null) {
        this.navClickableSlice.animate(this.animClickableSlice.repeat(tabsize));
      }
    }
  }
};
/**
 * @param {string} val
 * @return {undefined}
 */
wheelnavItem.prototype.setTitle = function(val) {
  this.title = val === undefined ? null : val;
  this.titleHover = this.title;
  this.titleSelected = this.title;
};
/**
 * @param {string} element
 * @return {undefined}
 */
wheelnavItem.prototype.setTooltip = function(element) {
  if (element !== null) {
    this.navItem.attr({
      title : element
    });
  }
};
/**
 * @param {boolean} recurring
 * @return {undefined}
 */
wheelnavItem.prototype.refreshNavItem = function(recurring) {
  if (this.selected) {
    this.navSlice.attr(this.sliceSelectedAttr);
    this.navLine.attr(this.lineSelectedAttr);
    this.navTitle.attr(this.titleSelectedAttr);
    if (this.navClickableSlice !== null) {
      this.navClickableSlice.attr(this.sliceClickableSelectedAttr);
    }
    if (this.wheelnav.selectedToFront) {
      this.navSlice.toFront();
      this.navLine.toFront();
      this.navTitle.toFront();
      if (this.navClickableSlice !== null) {
        this.navClickableSlice.toFront();
      }
    } else {
      if (this.navClickableSlice !== null) {
        this.navClickableSlice.toBack();
      }
      this.navTitle.toBack();
      this.navLine.toBack();
      this.navSlice.toBack();
    }
  } else {
    if (this.hovered) {
      this.navSlice.attr(this.sliceHoverAttr).toFront();
      this.navLine.attr(this.lineHoverAttr).toFront();
      this.navTitle.attr(this.titleHoverAttr).toFront();
      if (this.navClickableSlice !== null) {
        this.navClickableSlice.attr(this.sliceClickableHoverAttr).toFront();
      }
    } else {
      this.navSlice.attr(this.slicePathAttr);
      this.navLine.attr(this.linePathAttr);
      this.navTitle.attr(this.titleAttr);
      if (this.navClickableSlice !== null) {
        this.navClickableSlice.attr(this.sliceClickablePathAttr);
      }
      if (this.navClickableSlice !== null) {
        this.navClickableSlice.toBack();
      }
      this.navTitle.toBack();
      this.navLine.toBack();
      this.navSlice.toBack();
    }
  }
  if (recurring !== undefined) {
    if (recurring === true) {
      this.initPathsAndTransforms();
      this.setCurrentTransform(false, false);
    }
  }
};
/**
 * @param {boolean} recurring
 * @return {undefined}
 */
wheelnavItem.prototype.setWheelSettings = function(recurring) {
  if (this.wheelnav.slicePathAttr !== null) {
    /** @type {*} */
    this.slicePathAttr = JSON.parse(JSON.stringify(this.wheelnav.slicePathAttr));
  }
  if (this.wheelnav.sliceHoverAttr !== null) {
    /** @type {*} */
    this.sliceHoverAttr = JSON.parse(JSON.stringify(this.wheelnav.sliceHoverAttr));
  }
  if (this.wheelnav.sliceSelectedAttr !== null) {
    /** @type {*} */
    this.sliceSelectedAttr = JSON.parse(JSON.stringify(this.wheelnav.sliceSelectedAttr));
  }
  if (this.wheelnav.titleAttr !== null) {
    /** @type {*} */
    this.titleAttr = JSON.parse(JSON.stringify(this.wheelnav.titleAttr));
  }
  if (this.wheelnav.titleHoverAttr !== null) {
    /** @type {*} */
    this.titleHoverAttr = JSON.parse(JSON.stringify(this.wheelnav.titleHoverAttr));
  }
  if (this.wheelnav.titleSelectedAttr !== null) {
    /** @type {*} */
    this.titleSelectedAttr = JSON.parse(JSON.stringify(this.wheelnav.titleSelectedAttr));
  }
  if (this.wheelnav.titleWidth !== null) {
    if (this.titleWidth === null) {
      this.titleWidth = this.wheelnav.titleWidth;
    }
  }
  if (this.wheelnav.titleHeight !== null) {
    if (this.titleHeight === null) {
      this.titleHeight = this.wheelnav.titleHeight;
    }
  }
  if (this.titleWidth !== null) {
    if (this.titleHeight === null) {
      this.titleHeight = this.titleWidth;
    }
  }
  if (this.titleWidth === null) {
    if (this.titleHeight !== null) {
      this.titleWidth = this.titleHeight;
    }
  }
  if (wheelnavTitle().isImageTitle(this.title)) {
    if (this.titleWidth === null) {
      /** @type {number} */
      this.titleWidth = 32;
    }
    if (this.titleHeight === null) {
      /** @type {number} */
      this.titleHeight = 32;
    }
  }
  if (this.wheelnav.titleHoverWidth !== null) {
    if (this.titleHoverWidth === null) {
      this.titleHoverWidth = this.wheelnav.titleHoverWidth;
    }
  }
  if (this.wheelnav.titleHoverHeight !== null) {
    if (this.titleHoverHeight === null) {
      this.titleHoverHeight = this.wheelnav.titleHoverHeight;
    }
  }
  if (this.titleHoverWidth !== null) {
    if (this.titleHoverHeight === null) {
      this.titleHoverHeight = this.titleHoverWidth;
    }
  }
  if (this.titleHoverWidth === null) {
    if (this.titleHoverHeight !== null) {
      this.titleHoverWidth = this.titleHoverHeight;
    }
  }
  if (this.wheelnav.titleSelectedWidth !== null) {
    if (this.titleSelectedWidth === null) {
      this.titleSelectedWidth = this.wheelnav.titleSelectedWidth;
    }
  }
  if (this.wheelnav.titleSelectedHeight !== null) {
    if (this.titleSelectedHeight === null) {
      this.titleSelectedHeight = this.wheelnav.titleSelectedHeight;
    }
  }
  if (this.titleSelectedWidth !== null) {
    if (this.titleSelectedHeight === null) {
      this.titleSelectedHeight = this.titleSelectedWidth;
    }
  }
  if (this.titleSelectedWidth === null) {
    if (this.titleSelectedHeight !== null) {
      this.titleSelectedWidth = this.titleSelectedHeight;
    }
  }
  if (this.titleHoverHeight === null) {
    this.titleHoverHeight = this.titleHeight;
  }
  if (this.titleHoverWidth === null) {
    this.titleHoverWidth = this.titleWidth;
  }
  if (this.titleSelectedHeight === null) {
    this.titleSelectedHeight = this.titleHeight;
  }
  if (this.titleSelectedWidth === null) {
    this.titleSelectedWidth = this.titleWidth;
  }
  if (this.wheelnav.linePathAttr !== null) {
    /** @type {*} */
    this.linePathAttr = JSON.parse(JSON.stringify(this.wheelnav.linePathAttr));
  }
  if (this.wheelnav.lineHoverAttr !== null) {
    /** @type {*} */
    this.lineHoverAttr = JSON.parse(JSON.stringify(this.wheelnav.lineHoverAttr));
  }
  if (this.wheelnav.lineSelectedAttr !== null) {
    /** @type {*} */
    this.lineSelectedAttr = JSON.parse(JSON.stringify(this.wheelnav.lineSelectedAttr));
  }
  if (this.animateeffect === null || recurring) {
    this.animateeffect = this.wheelnav.animateeffect !== null ? this.wheelnav.animateeffect : "bounce";
  }
  if (this.animatetime === null || recurring) {
    this.animatetime = this.wheelnav.animatetime !== null ? this.wheelnav.animatetime : 1500;
  }
  if (this.title !== null) {
    if (this.sliceInitPathFunction === null || recurring) {
      this.sliceInitPathFunction = this.wheelnav.sliceInitPathFunction;
    }
    if (this.sliceClickablePathFunction === null || recurring) {
      this.sliceClickablePathFunction = this.wheelnav.sliceClickablePathFunction;
    }
    if (this.slicePathFunction === null || recurring) {
      this.slicePathFunction = this.wheelnav.slicePathFunction;
    }
    if (this.sliceSelectedPathFunction === null || recurring) {
      this.sliceSelectedPathFunction = this.wheelnav.sliceSelectedPathFunction;
    }
    if (this.sliceHoverPathFunction === null || recurring) {
      this.sliceHoverPathFunction = this.wheelnav.sliceHoverPathFunction;
    }
    if (this.sliceTransformFunction === null || recurring) {
      this.sliceTransformFunction = this.wheelnav.sliceTransformFunction;
    }
    if (this.sliceSelectedTransformFunction === null || recurring) {
      this.sliceSelectedTransformFunction = this.wheelnav.sliceSelectedTransformFunction;
    }
    if (this.sliceHoverTransformFunction === null || recurring) {
      this.sliceHoverTransformFunction = this.wheelnav.sliceHoverTransformFunction;
    }
    if (this.sliceInitTransformFunction === null || recurring) {
      this.sliceInitTransformFunction = this.wheelnav.sliceInitTransformFunction;
    }
  } else {
    this.sliceInitPathFunction = slicePath().NullInitSlice;
    this.sliceClickablePathFunction = slicePath().NullSlice;
    this.slicePathFunction = slicePath().NullSlice;
    /** @type {null} */
    this.sliceSelectedPathFunction = null;
    /** @type {null} */
    this.sliceHoverPathFunction = null;
    /** @type {null} */
    this.sliceTransformFunction = null;
    /** @type {null} */
    this.sliceSelectedTransformFunction = null;
    /** @type {null} */
    this.sliceHoverTransformFunction = null;
    /** @type {null} */
    this.sliceInitTransformFunction = null;
  }
  if (this.slicePathCustom === null || recurring) {
    this.slicePathCustom = this.wheelnav.slicePathCustom;
  }
  if (this.sliceClickablePathCustom === null || recurring) {
    this.sliceClickablePathCustom = this.wheelnav.sliceClickablePathCustom;
  }
  if (this.sliceSelectedPathCustom === null || recurring) {
    this.sliceSelectedPathCustom = this.wheelnav.sliceSelectedPathCustom;
  }
  if (this.sliceHoverPathCustom === null || recurring) {
    this.sliceHoverPathCustom = this.wheelnav.sliceHoverPathCustom;
  }
  if (this.sliceInitPathCustom === null || recurring) {
    this.sliceInitPathCustom = this.wheelnav.sliceInitPathCustom;
  }
  if (this.sliceTransformCustom === null || recurring) {
    this.sliceTransformCustom = this.wheelnav.sliceTransformCustom;
  }
  if (this.sliceSelectedTransformCustom === null || recurring) {
    this.sliceSelectedTransformCustom = this.wheelnav.sliceSelectedTransformCustom;
  }
  if (this.sliceHoverTransformCustom === null || recurring) {
    this.sliceHoverTransformCustom = this.wheelnav.sliceHoverTransformCustom;
  }
  if (this.sliceInitTransformCustom === null || recurring) {
    this.sliceInitTransformCustom = this.wheelnav.sliceInitTransformCustom;
  }
  if (this.initPercent === null || recurring) {
    this.initPercent = this.wheelnav.initPercent;
  }
  if (this.minPercent === null || recurring) {
    this.minPercent = this.wheelnav.minPercent;
  }
  if (this.maxPercent === null || recurring) {
    this.maxPercent = this.wheelnav.maxPercent;
  }
  if (this.hoverPercent === null || recurring) {
    this.hoverPercent = this.wheelnav.hoverPercent;
  }
  if (this.selectedPercent === null || recurring) {
    this.selectedPercent = this.wheelnav.selectedPercent;
  }
  if (this.clickablePercentMin === null || recurring) {
    this.clickablePercentMin = this.wheelnav.clickablePercentMin;
  }
  if (this.clickablePercentMax === null || recurring) {
    this.clickablePercentMax = this.wheelnav.clickablePercentMax;
  }
  if (this.titleSpreadScale === null || recurring) {
    this.titleSpreadScale = this.wheelnav.titleSpreadScale !== null ? this.wheelnav.titleSpreadScale : false;
  }
  if (this.sliceAngle === null || recurring) {
    if (this.wheelnav.sliceAngle !== null) {
      this.sliceAngle = this.wheelnav.sliceAngle;
    }
  }
};
/**
 * @return {undefined}
 */
wheelnavItem.prototype.initPathsAndTransforms = function() {
  this.sliceHelper = new pathHelper;
  this.sliceHelper.centerX = this.wheelnav.centerX;
  this.sliceHelper.centerY = this.wheelnav.centerY;
  this.sliceHelper.wheelRadius = this.wheelnav.wheelRadius;
  this.sliceHelper.startAngle = this.baseAngle;
  this.sliceHelper.sliceAngle = this.sliceAngle;
  this.sliceHelper.itemIndex = this.itemIndex;
  this.slicePathMin = this.slicePathFunction(this.sliceHelper, this.minPercent, this.slicePathCustom);
  this.slicePathMax = this.slicePathFunction(this.sliceHelper, this.maxPercent, this.slicePathCustom);
  this.selectedSlicePathMin = this.sliceSelectedPathFunction !== null ? this.sliceSelectedPathFunction(this.sliceHelper, this.selectedPercent * this.minPercent, this.sliceSelectedPathCustom) : this.slicePathFunction(this.sliceHelper, this.selectedPercent * this.minPercent, this.sliceSelectedPathCustom);
  this.selectedSlicePathMax = this.sliceSelectedPathFunction !== null ? this.sliceSelectedPathFunction(this.sliceHelper, this.selectedPercent * this.maxPercent, this.sliceSelectedPathCustom) : this.slicePathFunction(this.sliceHelper, this.selectedPercent * this.maxPercent, this.sliceSelectedPathCustom);
  this.hoverSlicePathMin = this.sliceHoverPathFunction !== null ? this.sliceHoverPathFunction(this.sliceHelper, this.hoverPercent * this.minPercent, this.sliceHoverPathCustom) : this.slicePathFunction(this.sliceHelper, this.hoverPercent * this.minPercent, this.sliceHoverPathCustom);
  this.hoverSlicePathMax = this.sliceHoverPathFunction !== null ? this.sliceHoverPathFunction(this.sliceHelper, this.hoverPercent * this.maxPercent, this.sliceHoverPathCustom) : this.slicePathFunction(this.sliceHelper, this.hoverPercent * this.maxPercent, this.sliceHoverPathCustom);
  if (this.sliceClickablePathFunction !== null) {
    this.clickableSlicePathMin = this.sliceClickablePathFunction(this.sliceHelper, this.clickablePercentMin, this.sliceClickablePathCustom);
    this.clickableSlicePathMax = this.sliceClickablePathFunction(this.sliceHelper, this.clickablePercentMax, this.sliceClickablePathCustom);
  }
  this.sliceInitPath = this.sliceInitPathFunction !== null ? this.sliceInitPathFunction(this.sliceHelper, this.initPercent, this.sliceInitPathCustom) : this.wheelnav.currentPercent === this.wheelnav.maxPercent ? this.slicePathFunction(this.sliceHelper, this.maxPercent, this.sliceInitPathCustom) : this.slicePathFunction(this.sliceHelper, this.minPercent, this.sliceInitPathCustom);
  this.sliceTransform = this.sliceTransformFunction !== null ? this.sliceTransformFunction(this.wheelnav.centerX, this.wheelnav.centerY, this.wheelnav.wheelRadius, this.baseAngle, this.sliceAngle, this.wheelnav.titleRotateAngle, this.itemIndex, this.sliceTransformCustom) : sliceTransform().NullTransform;
  this.selectTransform = this.sliceSelectedTransformFunction !== null ? this.sliceSelectedTransformFunction(this.wheelnav.centerX, this.wheelnav.centerY, this.wheelnav.wheelRadius, this.baseAngle, this.sliceAngle, this.wheelnav.titleRotateAngle, this.itemIndex, this.sliceSelectedTransformCustom) : sliceTransform().NullTransform;
  this.hoverTransform = this.sliceHoverTransformFunction !== null ? this.sliceHoverTransformFunction(this.wheelnav.centerX, this.wheelnav.centerY, this.wheelnav.wheelRadius, this.baseAngle, this.sliceAngle, this.wheelnav.titleRotateAngle, this.itemIndex, this.sliceHoverTransformCustom) : sliceTransform().NullTransform;
  this.initTransform = this.sliceInitTransformFunction !== null ? this.sliceInitTransformFunction(this.wheelnav.centerX, this.wheelnav.centerY, this.wheelnav.wheelRadius, this.baseAngle, this.sliceAngle, this.wheelnav.titleRotateAngle, this.itemIndex, this.sliceInitTransformCustom) : sliceTransform().NullTransform;
  if (wheelnavTitle().isPathTitle(this.title)) {
    initNavTitle = new wheelnavTitle(this.title, this.wheelnav.raphael.raphael);
    basicNavTitleMin = new wheelnavTitle(this.title, this.wheelnav.raphael.raphael);
    basicNavTitleMax = new wheelnavTitle(this.title, this.wheelnav.raphael.raphael);
    hoverNavTitleMin = new wheelnavTitle(this.titleHover, this.wheelnav.raphael.raphael);
    hoverNavTitleMax = new wheelnavTitle(this.titleHover, this.wheelnav.raphael.raphael);
    selectedNavTitleMin = new wheelnavTitle(this.titleSelected, this.wheelnav.raphael.raphael);
    selectedNavTitleMax = new wheelnavTitle(this.titleSelected, this.wheelnav.raphael.raphael);
    this.navTitleSizeTransform = basicNavTitleMax.getTitleSizeTransform(this.titleWidth, this.titleHeight);
    this.navTitleSizeHoverTransform = hoverNavTitleMax.getTitleSizeTransform(this.titleHoverWidth, this.titleHoverHeight);
    this.navTitleSizeSelectedTransform = selectedNavTitleMax.getTitleSizeTransform(this.titleSelectedWidth, this.titleSelectedHeight);
  } else {
    initNavTitle = new wheelnavTitle(this.title);
    basicNavTitleMin = new wheelnavTitle(this.title);
    basicNavTitleMax = new wheelnavTitle(this.title);
    hoverNavTitleMin = new wheelnavTitle(this.titleHover);
    hoverNavTitleMax = new wheelnavTitle(this.titleHover);
    selectedNavTitleMin = new wheelnavTitle(this.titleSelected);
    selectedNavTitleMax = new wheelnavTitle(this.titleSelected);
  }
  this.initNavTitle = initNavTitle.getTitlePercentAttr(this.sliceInitPath.titlePosX, this.sliceInitPath.titlePosY, this.titleWidth, this.titleHeight);
  this.basicNavTitleMin = basicNavTitleMin.getTitlePercentAttr(this.slicePathMin.titlePosX, this.slicePathMin.titlePosY, this.titleWidth, this.titleHeight);
  this.basicNavTitleMax = basicNavTitleMax.getTitlePercentAttr(this.slicePathMax.titlePosX, this.slicePathMax.titlePosY, this.titleWidth, this.titleHeight);
  this.hoverNavTitleMin = hoverNavTitleMin.getTitlePercentAttr(this.hoverSlicePathMin.titlePosX, this.hoverSlicePathMin.titlePosY, this.titleHoverWidth, this.titleHoverHeight);
  this.hoverNavTitleMax = hoverNavTitleMax.getTitlePercentAttr(this.hoverSlicePathMax.titlePosX, this.hoverSlicePathMax.titlePosY, this.titleHoverWidth, this.titleHoverHeight);
  this.selectedNavTitleMin = selectedNavTitleMin.getTitlePercentAttr(this.selectedSlicePathMin.titlePosX, this.selectedSlicePathMin.titlePosY, this.titleSelectedWidth, this.titleSelectedHeight);
  this.selectedNavTitleMax = selectedNavTitleMax.getTitlePercentAttr(this.selectedSlicePathMax.titlePosX, this.selectedSlicePathMax.titlePosY, this.titleSelectedWidth, this.titleSelectedHeight);
};
/**
 * @return {?}
 */
wheelnavItem.prototype.getCurrentPath = function() {
  return this.wheelnav.currentPercent === this.wheelnav.maxPercent ? this.selected ? this.selectedSlicePathMax : this.hovered ? this.hoverSlicePathMax : this.slicePathMax : this.selected ? this.selectedSlicePathMin : this.hovered ? this.hoverSlicePathMin : this.slicePathMin;
};
/**
 * @return {?}
 */
wheelnavItem.prototype.getCurrentClickablePath = function() {
  return this.wheelnav.currentPercent === this.wheelnav.maxPercent ? this.clickableSlicePathMax : this.clickableSlicePathMin;
};
/**
 * @return {?}
 */
wheelnavItem.prototype.getCurrentTitle = function() {
  return this.wheelnav.currentPercent === this.wheelnav.maxPercent ? this.selected ? this.selectedNavTitleMax : this.hovered ? this.hoverNavTitleMax : this.basicNavTitleMax : this.selected ? this.selectedNavTitleMin : this.hovered ? this.hoverNavTitleMin : this.basicNavTitleMin;
};
/**
 * @return {?}
 */
wheelnavItem.prototype.getItemRotateString = function() {
  return "r," + this.currentRotateAngle.toString() + "," + this.wheelnav.centerX + "," + this.wheelnav.centerY;
};
/**
 * @param {boolean} dataAndEvents
 * @return {?}
 */
wheelnavItem.prototype.getTitleRotateString = function(dataAndEvents) {
  /** @type {string} */
  var optsData = "";
  return optsData += this.getItemRotateString(), optsData + (this.wheelnav.titleRotateAngle !== null && dataAndEvents ? ",r," + (this.navAngle + this.wheelnav.titleRotateAngle).toString() : ",r," + (-this.currentRotateAngle).toString());
};
/**
 * @param {string} v
 * @param {?} nv
 * @return {?}
 */
wheelnavTitle = function(v, nv) {
  if (this.title = v, v !== null) {
    if (nv !== undefined) {
      this.relativePath = nv.pathToRelative(v);
      var box = nv.pathBBox(this.relativePath);
      this.centerX = box.cx;
      this.centerY = box.cy;
      this.width = box.width;
      this.height = box.height;
      this.startX = this.relativePath[0][1];
      this.startY = this.relativePath[0][2];
    }
    /** @type {string} */
    this.title = v;
  } else {
    /** @type {string} */
    this.title = "";
  }
  return this.isPathTitle = function(cssText) {
    return cssText !== null && ((cssText.substr(0, 1) === "m" || cssText.substr(0, 1) === "M") && ((cssText.substr(cssText.length - 1, 1) === "z" || cssText.substr(cssText.length - 1, 1) === "Z") && (cssText.indexOf(",") > -1 || cssText.indexOf(" ") > -1))) ? true : false;
  }, this.isImageTitle = function(handler) {
    return handler === undefined && (handler = this.title), handler !== null && handler.substr(0, 7) === "imgsrc:" ? true : false;
  }, this;
};
/**
 * @param {?} x
 * @param {number} startY
 * @param {number} w
 * @param {number} gridHeight
 * @return {?}
 */
wheelnavTitle.prototype.getTitlePercentAttr = function(x, startY, w, gridHeight) {
  var options = {};
  var ch;
  var endY;
  return this.relativePath !== undefined ? (ch = x + (this.startX - this.centerX), endY = startY + (this.startY - this.centerY), this.relativePath[0][1] = ch, this.relativePath[0][2] = endY, options = {
    path : this.relativePath,
    title : this.title
  }) : options = this.isImageTitle() ? {
    x : x - w / 2,
    y : startY - gridHeight / 2,
    width : w,
    height : gridHeight,
    title : this.title,
    src : this.title.substr(7, this.title.length)
  } : {
    x : x,
    y : startY,
    title : this.title
  }, options;
};
/**
 * @param {number} width
 * @param {number} value
 * @return {?}
 */
wheelnavTitle.prototype.getTitleSizeTransform = function(width, value) {
  /** @type {string} */
  var spaces = "";
  return width !== null && (value !== null && (spaces = "s", this.height > this.width ? (spaces += (width / this.height).toString() + ",", spaces += (value / this.height).toString()) : (spaces += (width / this.width).toString() + ",", spaces += (value / this.width).toString()))), spaces;
};
/**
 * @return {undefined}
 */
wheelnav.prototype.styleWheel = function() {
  if (this.cssMode) {
    this.spreaderPathInAttr = {
      "class" : this.getSpreaderCssClass("in")
    };
    this.spreaderPathOutAttr = {
      "class" : this.getSpreaderCssClass("out")
    };
    this.spreaderTitleInAttr = {
      "class" : this.getSpreaderTitleCssClass("in")
    };
    this.spreaderTitleOutAttr = {
      "class" : this.getSpreaderTitleCssClass("out")
    };
    this.markerAttr = {
      "class" : this.getMarkerCssClass()
    };
  } else {
    if (this.spreaderPathInAttr === undefined || this.spreaderPathInAttr === null) {
      this.spreaderPathInAttr = {
        fill : "#444",
        stroke : "#444",
        "stroke-width" : 2,
        cursor : "pointer"
      };
    }
    if (this.spreaderPathOutAttr === undefined || this.spreaderPathOutAttr === null) {
      this.spreaderPathOutAttr = {
        fill : "#444",
        stroke : "#444",
        "stroke-width" : 2,
        cursor : "pointer"
      };
    }
    if (this.spreaderTitleInAttr === undefined || this.spreaderTitleInAttr === null) {
      this.spreaderTitleInAttr = {
        fill : "#eee",
        stroke : "#444",
        cursor : "pointer"
      };
    }
    if (this.spreaderTitleOutAttr === undefined || this.spreaderTitleOutAttr === null) {
      this.spreaderTitleOutAttr = {
        fill : "#eee",
        stroke : "#444",
        cursor : "pointer"
      };
    }
    if (this.markerAttr === undefined || this.markerAttr === null) {
      this.markerAttr = {
        stroke : "#444",
        "stroke-width" : 2
      };
    }
  }
};
/**
 * @return {undefined}
 */
wheelnavItem.prototype.styleNavItem = function() {
  if (this.wheelnav.cssMode) {
    this.slicePathAttr = {
      "class" : this.wheelnav.getSliceCssClass(this.wheelItemIndex, "basic")
    };
    this.sliceHoverAttr = {
      "class" : this.wheelnav.getSliceCssClass(this.wheelItemIndex, "hover")
    };
    this.sliceSelectedAttr = {
      "class" : this.wheelnav.getSliceCssClass(this.wheelItemIndex, "selected")
    };
    this.titleAttr = {
      "class" : this.wheelnav.getTitleCssClass(this.wheelItemIndex, "basic")
    };
    this.titleHoverAttr = {
      "class" : this.wheelnav.getTitleCssClass(this.wheelItemIndex, "hover")
    };
    this.titleSelectedAttr = {
      "class" : this.wheelnav.getTitleCssClass(this.wheelItemIndex, "selected")
    };
    this.linePathAttr = {
      "class" : this.wheelnav.getLineCssClass(this.wheelItemIndex, "basic")
    };
    this.lineHoverAttr = {
      "class" : this.wheelnav.getLineCssClass(this.wheelItemIndex, "hover")
    };
    this.lineSelectedAttr = {
      "class" : this.wheelnav.getLineCssClass(this.wheelItemIndex, "selected")
    };
  } else {
    this.slicePathAttr = {
      stroke : "#333",
      "stroke-width" : 0,
      cursor : "pointer",
      "fill-opacity" : 1
    };
    this.sliceHoverAttr = {
      stroke : "#222",
      "stroke-width" : 0,
      cursor : "pointer",
      "fill-opacity" : 1
    };
    this.sliceSelectedAttr = {
      stroke : "#111",
      "stroke-width" : 0,
      cursor : "default",
      "fill-opacity" : 1
    };
    this.titleAttr = {
      font : this.titleFont,
      fill : "#333",
      stroke : "none",
      cursor : "pointer"
    };
    this.titleHoverAttr = {
      font : this.titleFont,
      fill : "#222",
      cursor : "pointer",
      stroke : "none"
    };
    this.titleSelectedAttr = {
      font : this.titleFont,
      fill : "#fff",
      cursor : "default"
    };
    this.linePathAttr = {
      stroke : "#444",
      "stroke-width" : 1,
      cursor : "pointer"
    };
    this.lineHoverAttr = {
      stroke : "#222",
      "stroke-width" : 2,
      cursor : "pointer"
    };
    this.lineSelectedAttr = {
      stroke : "#444",
      "stroke-width" : 1,
      cursor : "default"
    };
  }
  this.sliceClickablePathAttr = {
    fill : "#FFF",
    stroke : "#FFF",
    "stroke-width" : 0,
    cursor : "pointer",
    "fill-opacity" : 0.01
  };
  this.sliceClickableHoverAttr = {
    stroke : "#FFF",
    "stroke-width" : 0,
    cursor : "pointer"
  };
  this.sliceClickableSelectedAttr = {
    stroke : "#FFF",
    "stroke-width" : 0,
    cursor : "default"
  };
};
/**
 * @param {?} oid
 * @param {string} name
 * @return {?}
 */
wheelnav.prototype.getSliceCssClass = function(oid, name) {
  return "wheelnav-" + this.holderId + "-slice-" + name + "-" + oid;
};
/**
 * @param {?} oid
 * @param {string} name
 * @return {?}
 */
wheelnav.prototype.getTitleCssClass = function(oid, name) {
  return "wheelnav-" + this.holderId + "-title-" + name + "-" + oid;
};
/**
 * @param {?} oid
 * @param {string} name
 * @return {?}
 */
wheelnav.prototype.getLineCssClass = function(oid, name) {
  return "wheelnav-" + this.holderId + "-line-" + name + "-" + oid;
};
/**
 * @param {string} el
 * @return {?}
 */
wheelnav.prototype.getSpreaderCssClass = function(el) {
  return "wheelnav-" + this.holderId + "-spreader-" + el;
};
/**
 * @param {string} el
 * @return {?}
 */
wheelnav.prototype.getSpreaderTitleCssClass = function(el) {
  return "wheelnav-" + this.holderId + "-spreadertitle-" + el;
};
/**
 * @return {?}
 */
wheelnav.prototype.getMarkerCssClass = function() {
  return "wheelnav-" + this.holderId + "-marker";
};
/**
 * @return {?}
 */
var pathHelper = function() {
  return this.sliceRadius = 0, this.startAngle = 0, this.middleAngle = 0, this.endAngle = 0, this.sliceAngle = 0, this.startTheta = 0, this.middleTheta = 0, this.endTheta = 0, this.titlePosX = 0, this.titlePosY = 0, this.titleRadius = 0, this.titleTheta = 0, this.custom = null, this.centerX = 0, this.centerY = 0, this.wheelRadius = 0, this.itemIndex = 0, this.navItemCount = 0, this.navAngle = 0, this.setBaseValue = function(value, deepDataAndEvents) {
    if (deepDataAndEvents === null) {
      deepDataAndEvents = new slicePathCustomization;
    } else {
      /** @type {string} */
      this.custom = deepDataAndEvents;
    }
    /** @type {number} */
    this.sliceRadius = this.wheelRadius * value * 0.9;
    this.middleAngle = this.startAngle + this.sliceAngle / 2;
    this.endAngle = this.startAngle + this.sliceAngle;
    this.startTheta = this.getTheta(this.startAngle);
    this.middleTheta = this.getTheta(this.middleAngle);
    this.endTheta = this.getTheta(this.endAngle);
    if (deepDataAndEvents !== null) {
      if (deepDataAndEvents.titleRadiusPercent !== null) {
        /** @type {number} */
        this.titleRadius = this.sliceRadius * deepDataAndEvents.titleRadiusPercent;
      }
      if (deepDataAndEvents.titleSliceAnglePercent !== null) {
        this.titleTheta = this.getTheta(this.startAngle + this.sliceAngle * deepDataAndEvents.titleSliceAnglePercent);
      }
    } else {
      /** @type {number} */
      this.titleRadius = this.sliceRadius * 0.5;
      this.titleTheta = this.middleTheta;
    }
    this.setTitlePos();
  }, this.setTitlePos = function() {
    this.titlePosX = this.titleRadius * Math.cos(this.titleTheta) + this.centerX;
    this.titlePosY = this.titleRadius * Math.sin(this.titleTheta) + this.centerY;
  }, this.getX = function(a, y) {
    return y * Math.cos(this.getTheta(a)) + this.centerX;
  }, this.getY = function(a, node) {
    return node * Math.sin(this.getTheta(a)) + this.centerY;
  }, this.MoveTo = function(x, y) {
    return["M", this.getX(x, y), this.getY(x, y)];
  }, this.MoveToCenter = function() {
    return["M", this.centerX, this.centerY];
  }, this.LineTo = function(x, key, t, hash) {
    return t === undefined && (t = x), hash === undefined && (hash = key), ["L", this.getX(x, key), this.getY(t, hash)];
  }, this.ArcTo = function(key, angle, data) {
    return["A", key, key, 0, 0, 1, this.getX(angle, data), this.getY(angle, data)];
  }, this.ArcBackTo = function(data, t, key) {
    return["A", data, data, 0, 0, 0, this.getX(t, key), this.getY(t, key)];
  }, this.StartSpreader = function(memo, value, key) {
    if (this.endAngle - this.startAngle == 360) {
      memo.push(this.MoveTo(value, key));
    } else {
      memo.push(this.MoveToCenter());
      memo.push(this.LineTo(value, key));
    }
  }, this.Close = function() {
    return["z"];
  }, this.getTheta = function(v02) {
    return v02 % 360 * Math.PI / 180;
  }, this;
};
/**
 * @return {?}
 */
var slicePathCustomization = function() {
  return this.titleRadiusPercent = 0.5, this.titleSliceAnglePercent = 0.5, this;
};
/**
 * @return {?}
 */
var spreaderPathCustomization = function() {
  return this.titleRadiusPercent = 0, this.titleSliceAnglePercent = 0.5, this.spreaderPercent = 1, this;
};
/**
 * @return {?}
 */
var markerPathCustomization = function() {
  return this.titleRadiusPercent = 1, this.titleSliceAnglePercent = 0.5, this.markerPercent = 1.05, this;
};
/**
 * @return {?}
 */
slicePath = function() {
  return this.NullSlice = function(nv, v, deepDataAndEvents) {
    return nv.setBaseValue(v, deepDataAndEvents), {
      slicePathString : "",
      linePathString : "",
      titlePosX : nv.titlePosX,
      titlePosY : nv.titlePosY
    };
  }, this.NullInitSlice = function(otherObject, isXML, deepDataAndEvents) {
    return otherObject.setBaseValue(isXML, deepDataAndEvents), slicePathString = [otherObject.MoveToCenter(), otherObject.Close()], {
      slicePathString : slicePathString,
      linePathString : slicePathString,
      titlePosX : otherObject.centerX,
      titlePosY : otherObject.centerY
    };
  }, this.PieSliceCustomization = function() {
    var titleRadiusPercent = new slicePathCustomization;
    return titleRadiusPercent.titleRadiusPercent = 0.6, titleRadiusPercent.arcBaseRadiusPercent = 1, titleRadiusPercent.arcRadiusPercent = 1, titleRadiusPercent.startRadiusPercent = 0, titleRadiusPercent;
  }, this.PieSlice = function(_this, isXML, deepDataAndEvents) {
    if (deepDataAndEvents === null) {
      deepDataAndEvents = PieSliceCustomization();
    }
    _this.setBaseValue(isXML, deepDataAndEvents);
    /** @type {number} */
    var files = _this.sliceRadius * deepDataAndEvents.arcBaseRadiusPercent;
    /** @type {number} */
    var camelKey = _this.sliceRadius * deepDataAndEvents.arcRadiusPercent;
    return slicePathString = [_this.MoveTo(_this.middleAngle, deepDataAndEvents.startRadiusPercent * _this.sliceRadius), _this.LineTo(_this.startAngle, files), _this.ArcTo(camelKey, _this.endAngle, files), _this.Close()], {
      slicePathString : slicePathString,
      linePathString : "",
      titlePosX : _this.titlePosX,
      titlePosY : _this.titlePosY
    };
  }, this.FlowerSlice = function(elem, fn, until) {
    if (until === null) {
      until = PieSliceCustomization();
      /** @type {number} */
      until.titleRadiusPercent = 0.5;
      /** @type {number} */
      until.arcBaseRadiusPercent = 0.65;
      /** @type {number} */
      until.arcRadiusPercent = 0.14;
    }
    var matched = PieSlice(elem, fn, until);
    return{
      slicePathString : matched.slicePathString,
      linePathString : "",
      titlePosX : matched.titlePosX,
      titlePosY : matched.titlePosY
    };
  }, this.PieArrowSliceCustomization = function() {
    var titleRadiusPercent = new slicePathCustomization;
    return titleRadiusPercent.titleRadiusPercent = 0.6, titleRadiusPercent.arrowRadiusPercent = 1.1, titleRadiusPercent;
  }, this.PieArrowSlice = function(_this, isXML, deepDataAndEvents) {
    if (deepDataAndEvents === null) {
      deepDataAndEvents = PieArrowSliceCustomization();
    }
    _this.setBaseValue(isXML, deepDataAndEvents);
    r = _this.sliceRadius;
    arrowAngleStart = _this.startAngle + _this.sliceAngle * 0.45;
    arrowAngleEnd = _this.startAngle + _this.sliceAngle * 0.55;
    /** @type {number} */
    var camelKey = r * deepDataAndEvents.arrowRadiusPercent;
    return slicePathString = [_this.MoveToCenter(), _this.LineTo(_this.startAngle, r), _this.ArcTo(r, arrowAngleStart, r), _this.LineTo(_this.middleAngle, camelKey), _this.LineTo(arrowAngleEnd, r), _this.ArcTo(r, _this.endAngle, r), _this.Close()], {
      slicePathString : slicePathString,
      linePathString : "",
      titlePosX : _this.titlePosX,
      titlePosY : _this.titlePosY
    };
  }, this.PieArrowBasePieSlice = function($rootScope, protoProps, classProps) {
    if (classProps === null) {
      classProps = PieArrowSliceCustomization();
    }
    /** @type {number} */
    classProps.arrowRadiusPercent = 1;
    var child = PieArrowSlice($rootScope, protoProps, classProps);
    return{
      slicePathString : child.slicePathString,
      linePathString : "",
      titlePosX : child.titlePosX,
      titlePosY : child.titlePosY
    };
  }, this.DonutSliceCustomization = function() {
    var minRadiusPercent = new slicePathCustomization;
    return minRadiusPercent.minRadiusPercent = 0.37, minRadiusPercent.maxRadiusPercent = 0.9, minRadiusPercent;
  }, this.DonutSlice = function(_this, isXML, deepDataAndEvents) {
    return deepDataAndEvents === null && (deepDataAndEvents = DonutSliceCustomization()), maxRadius = _this.wheelRadius * isXML * deepDataAndEvents.maxRadiusPercent, minRadius = _this.wheelRadius * isXML * deepDataAndEvents.minRadiusPercent, _this.setBaseValue(isXML, deepDataAndEvents), _this.titleRadius = (maxRadius + minRadius) / 2, _this.setTitlePos(), slicePathString = [_this.MoveTo(_this.startAngle, minRadius), _this.LineTo(_this.startAngle, maxRadius), _this.ArcTo(maxRadius, _this.endAngle, 
    maxRadius), _this.LineTo(_this.endAngle, minRadius), _this.ArcBackTo(minRadius, _this.startAngle, minRadius), _this.Close()], {
      slicePathString : slicePathString,
      linePathString : "",
      titlePosX : _this.titlePosX,
      titlePosY : _this.titlePosY
    };
  }, this.CogSliceCustomization = function() {
    var titleRadiusPercent = new slicePathCustomization;
    return titleRadiusPercent.titleRadiusPercent = 0.55, titleRadiusPercent.isBasePieSlice = false, titleRadiusPercent;
  }, this.CogSlice = function(_this, isXML, deepDataAndEvents) {
    return deepDataAndEvents === null && (deepDataAndEvents = CogSliceCustomization()), _this.setBaseValue(isXML, deepDataAndEvents), r = _this.sliceRadius, rbase = _this.wheelRadius * isXML * 0.83, percentAngle0625 = _this.startAngle + _this.sliceAngle * 0.0625, percentAngle1250 = _this.startAngle + _this.sliceAngle * 0.125, percentAngle1875 = _this.startAngle + _this.sliceAngle * 0.1875, percentAngle2500 = _this.startAngle + _this.sliceAngle * 0.25, percentAngle3125 = _this.startAngle + _this.sliceAngle * 
    0.3125, percentAngle3750 = _this.startAngle + _this.sliceAngle * 0.375, percentAngle4375 = _this.startAngle + _this.sliceAngle * 0.4375, percentAngle5000 = _this.startAngle + _this.sliceAngle * 0.5, percentAngle5625 = _this.startAngle + _this.sliceAngle * 0.5625, percentAngle6250 = _this.startAngle + _this.sliceAngle * 0.625, percentAngle6875 = _this.startAngle + _this.sliceAngle * 0.6875, percentAngle7500 = _this.startAngle + _this.sliceAngle * 0.75, percentAngle8125 = _this.startAngle + _this.sliceAngle * 
    0.8125, percentAngle8750 = _this.startAngle + _this.sliceAngle * 0.875, percentAngle9375 = _this.startAngle + _this.sliceAngle * 0.9375, percentAngle9687 = _this.startAngle + _this.sliceAngle * 0.96875, deepDataAndEvents.isBasePieSlice ? (r = rbase, slicePathString = [_this.MoveToCenter(), _this.LineTo(_this.startAngle, r), _this.ArcTo(r, percentAngle0625, r), _this.ArcTo(r, percentAngle1250, r), _this.ArcTo(r, percentAngle1875, r), _this.ArcTo(r, percentAngle2500, r), _this.ArcTo(r, percentAngle3125, 
    r), _this.ArcTo(r, percentAngle3750, r), _this.ArcTo(r, percentAngle4375, r), _this.ArcTo(r, percentAngle5000, r), _this.ArcTo(r, percentAngle5625, r), _this.ArcTo(r, percentAngle6250, r), _this.ArcTo(r, percentAngle6875, r), _this.ArcTo(r, percentAngle7500, r), _this.ArcTo(r, percentAngle8125, r), _this.ArcTo(r, percentAngle8750, r), _this.ArcTo(r, percentAngle9375, r), _this.ArcTo(r, percentAngle9687, r), _this.ArcTo(r, _this.endAngle, r), _this.Close()]) : slicePathString = [_this.MoveToCenter(), 
    _this.LineTo(_this.startAngle, r), _this.ArcTo(r, percentAngle0625, r), _this.LineTo(percentAngle0625, rbase), _this.ArcTo(rbase, percentAngle1875, rbase), _this.LineTo(percentAngle1875, r), _this.ArcTo(r, percentAngle3125, r), _this.LineTo(percentAngle3125, rbase), _this.ArcTo(rbase, percentAngle4375, rbase), _this.LineTo(percentAngle4375, r), _this.ArcTo(r, percentAngle5625, r), _this.LineTo(percentAngle5625, rbase), _this.ArcTo(rbase, percentAngle6875, rbase), _this.LineTo(percentAngle6875, 
    r), _this.ArcTo(r, percentAngle8125, r), _this.LineTo(percentAngle8125, rbase), _this.ArcTo(rbase, percentAngle9375, rbase), _this.LineTo(percentAngle9375, r), _this.ArcTo(r, _this.endAngle, r), _this.Close()], {
      slicePathString : slicePathString,
      linePathString : "",
      titlePosX : _this.titlePosX,
      titlePosY : _this.titlePosY
    };
  }, this.CogBasePieSlice = function(owner, opt_obj2, deepDataAndEvents) {
    if (deepDataAndEvents === null) {
      deepDataAndEvents = CogSliceCustomization();
    }
    /** @type {boolean} */
    deepDataAndEvents.isBasePieSlice = true;
    var unlock = CogSlice(owner, opt_obj2, deepDataAndEvents);
    return{
      slicePathString : unlock.slicePathString,
      linePathString : "",
      titlePosX : unlock.titlePosX,
      titlePosY : unlock.titlePosY
    };
  }, this.StarSliceCustomization = function() {
    var titleRadiusPercent = new slicePathCustomization;
    return titleRadiusPercent.titleRadiusPercent = 0.44, titleRadiusPercent.minRadiusPercent = 0.5, titleRadiusPercent.isBasePieSlice = false, titleRadiusPercent;
  }, this.StarSlice = function(_this, isXML, deepDataAndEvents) {
    return deepDataAndEvents === null && (deepDataAndEvents = StarSliceCustomization()), _this.setBaseValue(isXML, deepDataAndEvents), r = _this.wheelRadius * isXML, rbase = r * deepDataAndEvents.minRadiusPercent, deepDataAndEvents.isBasePieSlice ? (r = _this.sliceRadius, slicePathString = [_this.MoveToCenter(), _this.LineTo(_this.startAngle, r), _this.ArcTo(r, _this.middleAngle, r), _this.ArcTo(r, _this.endAngle, r), _this.Close()]) : slicePathString = [_this.MoveToCenter(), _this.LineTo(_this.startAngle, 
    rbase), _this.LineTo(_this.middleAngle, r), _this.LineTo(_this.endAngle, rbase), _this.Close()], {
      slicePathString : slicePathString,
      linePathString : "",
      titlePosX : _this.titlePosX,
      titlePosY : _this.titlePosY
    };
  }, this.StarBasePieSlice = function(elem, fn, until) {
    if (until === null) {
      until = StarSliceCustomization();
    }
    /** @type {number} */
    until.titleRadiusPercent = 0.6;
    /** @type {boolean} */
    until.isBasePieSlice = true;
    var matched = StarSlice(elem, fn, until);
    return{
      slicePathString : matched.slicePathString,
      linePathString : "",
      titlePosX : matched.titlePosX,
      titlePosY : matched.titlePosY
    };
  }, this.MenuSliceCustomization = function() {
    var options = new slicePathCustomization;
    return options.menuRadius = 35, options.titleRadiusPercent = 0.63, options.isSelectedLine = false, options.lineBaseRadiusPercent = 0, options;
  }, this.MenuSlice = function(self, i, deepDataAndEvents) {
    var multDivAng;
    var index;
    return deepDataAndEvents === null && (deepDataAndEvents = MenuSliceCustomization()), self.setBaseValue(i, deepDataAndEvents), x = self.centerX, y = self.centerY, multDivAng = self.wheelRadius * i, self.titleRadius = multDivAng * deepDataAndEvents.titleRadiusPercent, self.setTitlePos(), index = i * deepDataAndEvents.menuRadius, i <= 0.05 && (index = 10), middleTheta = self.middleTheta, slicePathString = [["M", self.titlePosX - index * Math.cos(middleTheta), self.titlePosY - index * Math.sin(middleTheta)], 
    ["A", index, index, 0, 0, 1, self.titlePosX + index * Math.cos(middleTheta), self.titlePosY + index * Math.sin(middleTheta)], ["A", index, index, 0, 0, 1, self.titlePosX - index * Math.cos(middleTheta), self.titlePosY - index * Math.sin(middleTheta)], ["z"]], linePathString = i <= 0.05 ? [["M", x, y], ["A", 1, 1, 0, 0, 1, x + 1, y + 1]] : deepDataAndEvents.isSelectedLine ? [self.MoveTo(self.middleAngle, deepDataAndEvents.lineBaseRadiusPercent * multDivAng), self.ArcTo(multDivAng / 3, self.middleAngle, 
    self.titleRadius - index)] : [self.MoveTo(self.middleAngle, deepDataAndEvents.lineBaseRadiusPercent * multDivAng), self.ArcTo(multDivAng / 2, self.middleAngle, self.titleRadius - index)], {
      slicePathString : slicePathString,
      linePathString : linePathString,
      titlePosX : self.titlePosX,
      titlePosY : self.titlePosY
    };
  }, this.MenuSliceSelectedLine = function($rootScope, protoProps, classProps) {
    if (classProps === null) {
      classProps = MenuSliceCustomization();
    }
    /** @type {boolean} */
    classProps.isSelectedLine = true;
    var child = MenuSlice($rootScope, protoProps, classProps);
    return{
      slicePathString : child.slicePathString,
      linePathString : child.linePathString,
      titlePosX : child.titlePosX,
      titlePosY : child.titlePosY
    };
  }, this.MenuSliceWithoutLine = function($rootScope, protoProps, classProps) {
    var child = MenuSlice($rootScope, protoProps, classProps);
    return{
      slicePathString : child.slicePathString,
      linePathString : "",
      titlePosX : child.titlePosX,
      titlePosY : child.titlePosY
    };
  }, this.LineSlice = function(_this, isXML, deepDataAndEvents) {
    return _this.setBaseValue(isXML, deepDataAndEvents), r = _this.sliceRadius, _this.sliceAngle > 60 && _this.sliceAngle < 180 ? (_this.titleRadius = r * (36 / _this.sliceAngle), _this.setTitlePos()) : (_this.titleRadius = r * 0.55, _this.setTitlePos()), slicePathString = _this.sliceAngle < 180 ? [_this.MoveToCenter(), _this.LineTo(_this.startAngle, r), _this.LineTo(_this.endAngle, r), _this.Close()] : _this.startAngle === 180 || (_this.startAngle === 0 || (_this.startAngle === -180 || _this.startAngle === 
    360)) ? [_this.MoveToCenter(), _this.LineTo(_this.startAngle, r), _this.LineTo(_this.startAngle, r, _this.middleAngle, r), _this.LineTo(_this.endAngle, r, _this.middleAngle, r), _this.LineTo(_this.endAngle, r), _this.Close()] : [_this.MoveToCenter(), _this.LineTo(_this.startAngle, r), _this.LineTo(_this.middleAngle, r, _this.startAngle, r), _this.LineTo(_this.middleAngle, r, _this.endAngle, r), _this.LineTo(_this.endAngle, r), _this.Close()], {
      slicePathString : slicePathString,
      linePathString : "",
      titlePosX : _this.titlePosX,
      titlePosY : _this.titlePosY
    };
  }, this.EyeSliceCustomization = function() {
    var titleRadiusPercent = new slicePathCustomization;
    return titleRadiusPercent.titleRadiusPercent = 0.68, titleRadiusPercent;
  }, this.EyeSlice = function(item, value, deepDataAndEvents) {
    return deepDataAndEvents === null && (deepDataAndEvents = EyeSliceCustomization()), item.setBaseValue(value, deepDataAndEvents), r = item.wheelRadius * value * 0.7, value === 0 && (r = 0.01), startAngle = item.startAngle, endAngle = item.endAngle, item.sliceAngle === 180 && (startAngle = item.startAngle + item.sliceAngle / 4, endAngle = item.startAngle + item.sliceAngle - item.sliceAngle / 4), slicePathString = [item.MoveTo(endAngle, r), item.ArcTo(r, startAngle, r), item.ArcTo(r, endAngle, r), 
    item.Close()], {
      slicePathString : slicePathString,
      linePathString : "",
      titlePosX : item.titlePosX,
      titlePosY : item.titlePosY
    };
  }, this.WheelSlice = function(self, arg, deepDataAndEvents) {
    self.setBaseValue(arg, deepDataAndEvents);
    x = self.centerX;
    y = self.centerY;
    r = self.sliceRadius;
    startTheta = self.startTheta;
    middleTheta = self.middleTheta;
    endTheta = self.endTheta;
    var step;
    return self.sliceAngle < 120 ? (self.titleRadius = r * 0.57, step = 0.9) : self.sliceAngle < 180 ? (self.titleRadius = r * 0.52, step = 0.91) : (self.titleRadius = r * 0.45, step = 0.873), slicePathString = [self.MoveTo(self.middleAngle, r * 0.07), ["L", r * 0.07 * Math.cos(middleTheta) + r * 0.87 * Math.cos(startTheta) + x, r * 0.07 * Math.sin(middleTheta) + r * 0.87 * Math.sin(startTheta) + y], ["A", r * step, r * step, 0, 0, 1, r * 0.07 * Math.cos(middleTheta) + r * 0.87 * Math.cos(endTheta) + 
    x, r * 0.07 * Math.sin(middleTheta) + r * 0.87 * Math.sin(endTheta) + y], self.Close()], linePathString = [self.MoveTo(self.startAngle, r), self.ArcTo(r, self.endAngle, r), self.ArcBackTo(r, self.startAngle, r)], self.setTitlePos(), {
      slicePathString : slicePathString,
      linePathString : linePathString,
      titlePosX : self.titlePosX,
      titlePosY : self.titlePosY
    };
  }, this.OuterStrokeSlice = function(self, arg, deepDataAndEvents) {
    return self.setBaseValue(arg, deepDataAndEvents), x = self.centerX, y = self.centerY, r = self.sliceRadius, innerRadius = r / 4, self.titleRadius = self.sliceAngle < 120 ? r * 0.57 : self.sliceAngle < 180 ? r * 0.52 : r * 0.45, linePathString = [self.MoveTo(self.startAngle, innerRadius), self.LineTo(self.startAngle, r), self.MoveTo(self.endAngle, innerRadius), self.LineTo(self.endAngle, r)], slicePathString = [self.MoveTo(self.startAngle, r), self.ArcTo(r, self.endAngle, r), self.ArcBackTo(r, 
    self.startAngle, r), self.MoveTo(self.startAngle, innerRadius), self.ArcTo(innerRadius, self.endAngle, innerRadius), self.ArcBackTo(innerRadius, self.startAngle, innerRadius)], self.setTitlePos(), {
      slicePathString : slicePathString,
      linePathString : linePathString,
      titlePosX : self.titlePosX,
      titlePosY : self.titlePosY
    };
  }, this.TabSlice = function(self) {
    /** @type {number} */
    var bgy = self.wheelRadius * 0.9;
    /** @type {number} */
    var resolution = 360 / self.sliceAngle;
    /** @type {number} */
    var size = 2 * bgy / resolution;
    return x = self.centerX, y = self.centerY, itemIndex = self.itemIndex, titlePosX = x, titlePosY = itemIndex * size + y + size / 2 - bgy, slicePathString = [["M", x - size / 2, itemIndex * size + y - bgy], ["L", size / 2 + x, itemIndex * size + y - bgy], ["L", size / 2 + x, (itemIndex + 1) * size + y - bgy], ["L", x - size / 2, (itemIndex + 1) * size + y - bgy], ["z"]], {
      slicePathString : slicePathString,
      linePathString : "",
      titlePosX : titlePosX,
      titlePosY : titlePosY
    };
  }, this.YinYangSlice = function(_this, isXML, deepDataAndEvents) {
    return _this.setBaseValue(isXML, deepDataAndEvents), r = _this.sliceRadius, slicePathString = [_this.MoveToCenter(), _this.ArcTo(r / 2, _this.startAngle, r), _this.ArcTo(r, _this.endAngle, r), _this.ArcBackTo(r / 2, 0, 0), _this.Close()], titlePosX = _this.getX(_this.startAngle, r / 2), titlePosY = _this.getY(_this.startAngle, r / 2), {
      slicePathString : slicePathString,
      linePathString : slicePathString,
      titlePosX : titlePosX,
      titlePosY : titlePosY
    };
  }, this.WebSlice = function(_this, isXML, deepDataAndEvents) {
    return _this.setBaseValue(isXML, deepDataAndEvents), r = _this.sliceRadius, _this.titleRadius = r * 0.55, _this.setTitlePos(), linePathString = [_this.MoveToCenter(), _this.LineTo(_this.startAngle, r * 1.1), _this.MoveToCenter(), _this.LineTo(_this.endAngle, r * 1.1), _this.MoveTo(_this.startAngle, r * 0.15), _this.LineTo(_this.endAngle, r * 0.15), _this.MoveTo(_this.startAngle, r * 0.35), _this.LineTo(_this.endAngle, r * 0.35), _this.MoveTo(_this.startAngle, r * 0.55), _this.LineTo(_this.endAngle, 
    r * 0.55), _this.MoveTo(_this.startAngle, r * 0.75), _this.LineTo(_this.endAngle, r * 0.75), _this.MoveTo(_this.startAngle, r * 0.95), _this.LineTo(_this.endAngle, r * 0.95), _this.Close()], {
      slicePathString : "",
      linePathString : linePathString,
      titlePosX : _this.titlePosX,
      titlePosY : _this.titlePosY
    };
  }, this.WinterSliceCustomization = function() {
    var titleRadiusPercent = new slicePathCustomization;
    return titleRadiusPercent.titleRadiusPercent = 0.85, titleRadiusPercent.arcRadiusPercent = 1, titleRadiusPercent;
  }, this.WinterSlice = function(cc, baseValue, deepDataAndEvents) {
    if (deepDataAndEvents === null) {
      deepDataAndEvents = WinterSliceCustomization();
    }
    cc.setBaseValue(baseValue, deepDataAndEvents);
    sliceAngle = cc.sliceAngle;
    parallelAngle = cc.startAngle + sliceAngle / 4;
    parallelAngle2 = cc.startAngle + sliceAngle / 4 * 3;
    borderAngle1 = cc.startAngle + sliceAngle / 200;
    /** @type {number} */
    borderAngle2 = cc.startAngle + sliceAngle / 2 - sliceAngle / 200;
    borderAngle3 = cc.startAngle + sliceAngle / 2 + sliceAngle / 200;
    /** @type {number} */
    borderAngle4 = cc.startAngle + sliceAngle - sliceAngle / 200;
    /** @type {number} */
    var h = cc.sliceRadius * deepDataAndEvents.arcRadiusPercent;
    return slicePathString = [cc.MoveToCenter(), cc.MoveTo(parallelAngle, h / 100), cc.LineTo(borderAngle1, h / 2), cc.LineTo(parallelAngle, h - h / 100), cc.LineTo(borderAngle2, h / 2), cc.LineTo(parallelAngle, h / 100), cc.MoveTo(parallelAngle2, h / 100), cc.LineTo(borderAngle4, h / 2), cc.LineTo(parallelAngle2, h - h / 100), cc.LineTo(borderAngle3, h / 2), cc.LineTo(parallelAngle2, h / 100), cc.Close()], linePathString = [cc.MoveTo(parallelAngle, h), cc.LineTo(borderAngle2, h / 2), cc.MoveTo(borderAngle3, 
    h / 2), cc.LineTo(parallelAngle2, h)], {
      slicePathString : slicePathString,
      linePathString : linePathString,
      titlePosX : cc.titlePosX,
      titlePosY : cc.titlePosY
    };
  }, this.TutorialSliceCustomization = function() {
    var isLineTo = new slicePathCustomization;
    return isLineTo.titleRadiusPercent = 0.6, isLineTo.isMoveTo = false, isLineTo.isLineTo = false, isLineTo.isArcTo = false, isLineTo.isArcBackTo = false, isLineTo;
  }, this.TutorialSlice = function(_this, isXML, deepDataAndEvents) {
    return deepDataAndEvents === null && (deepDataAndEvents = TutorialSliceCustomization()), _this.setBaseValue(isXML, deepDataAndEvents), slicePathString = [], slicePathString.push(_this.MoveToCenter()), deepDataAndEvents.isMoveTo === true && slicePathString.push(_this.MoveTo(_this.middleAngle, _this.sliceRadius / 4)), deepDataAndEvents.isLineTo && slicePathString.push(_this.LineTo(_this.startAngle, _this.sliceRadius)), deepDataAndEvents.isArcTo && slicePathString.push(_this.ArcTo(_this.sliceRadius, 
    _this.middleAngle, _this.sliceRadius)), deepDataAndEvents.isArcBackTo && slicePathString.push(_this.ArcBackTo(_this.sliceRadius, _this.endAngle, _this.sliceRadius)), slicePathString.push(_this.Close()), linePathString = [_this.MoveToCenter(), _this.LineTo(_this.startAngle, _this.sliceRadius), _this.ArcTo(_this.sliceRadius, _this.endAngle, _this.sliceRadius), _this.Close()], {
      slicePathString : slicePathString,
      linePathString : linePathString,
      titlePosX : _this.titlePosX,
      titlePosY : _this.titlePosY
    };
  }, this;
};
/**
 * @return {?}
 */
sliceTransform = function() {
  /** @type {number} */
  this.startAngle = 0;
  /** @type {number} */
  this.startTheta = 0;
  /** @type {number} */
  this.middleTheta = 0;
  /** @type {number} */
  this.endTheta = 0;
  /**
   * @param {?} target
   * @param {?} shallow
   * @param {number} deepDataAndEvents
   * @param {number} triggerRoute
   * @param {number} measure
   * @return {undefined}
   */
  var flatten = function(target, shallow, deepDataAndEvents, triggerRoute, measure) {
    /** @type {number} */
    this.startAngle = triggerRoute;
    this.startTheta = rotate(startAngle);
    this.middleTheta = rotate(startAngle + measure / 2);
    this.endTheta = rotate(startAngle + measure);
  };
  /**
   * @param {number} angle
   * @return {?}
   */
  var rotate = function(angle) {
    return angle % 360 * Math.PI / 180;
  };
  return this.NullTransform = function() {
    return{
      sliceTransformString : "",
      lineTransformString : "",
      titleTransformString : ""
    };
  }, this.MoveMiddleTransform = function(value, shallow, deepDataAndEvents, triggerRoute, measure, index, opt_obj2) {
    var sliceTransformString;
    var theta2;
    var startAngle;
    var titleTransformString;
    return flatten(value, shallow, deepDataAndEvents, triggerRoute, measure, index, opt_obj2), sliceTransformString = "t" + (deepDataAndEvents / 10 * Math.cos(middleTheta)).toString() + "," + (deepDataAndEvents / 10 * Math.sin(middleTheta)).toString(), index !== null ? theta2 = rotate(-index) : (startAngle = triggerRoute - opt_obj2 * measure, theta2 = rotate(startAngle + measure / 2)), titleTransformString = "s1,r0,t" + (deepDataAndEvents / 10 * Math.cos(theta2)).toString() + "," + (deepDataAndEvents / 
    10 * Math.sin(theta2)).toString(), {
      sliceTransformString : sliceTransformString,
      lineTransformString : sliceTransformString,
      titleTransformString : titleTransformString
    };
  }, this.RotateTransform = function() {
    /** @type {string} */
    var sliceTransformString = "s1,r360";
    return{
      sliceTransformString : sliceTransformString,
      lineTransformString : sliceTransformString,
      titleTransformString : sliceTransformString
    };
  }, this.RotateHalfTransform = function() {
    /** @type {string} */
    var sliceTransformString = "s1,r90";
    return{
      sliceTransformString : sliceTransformString,
      lineTransformString : sliceTransformString,
      titleTransformString : sliceTransformString
    };
  }, this.RotateTitleTransform = function() {
    return{
      sliceTransformString : "",
      lineTransformString : "",
      titleTransformString : "s1,r360"
    };
  }, this.ScaleTransform = function() {
    /** @type {string} */
    var sliceTransformString = "s1.2";
    return{
      sliceTransformString : sliceTransformString,
      lineTransformString : "",
      titleTransformString : sliceTransformString
    };
  }, this.ScaleTitleTransform = function() {
    return{
      sliceTransformString : "",
      lineTransformString : "",
      titleTransformString : "s1.3"
    };
  }, this.RotateScaleTransform = function() {
    /** @type {string} */
    var sliceTransformString = "r360,s1.3";
    return{
      sliceTransformString : sliceTransformString,
      lineTransformString : "",
      titleTransformString : sliceTransformString
    };
  }, this.CustomTransform = function(deepDataAndEvents, ignoreMethodDoesntExist, textAlt, keepData, opt_attributes, matcherFunction, execResult, dataAndEvents) {
    /** @type {string} */
    var sliceTransformString = dataAndEvents.scaleString + "," + dataAndEvents.rotateString;
    return{
      sliceTransformString : sliceTransformString,
      lineTransformString : sliceTransformString,
      titleTransformString : sliceTransformString
    };
  }, this.CustomTitleTransform = function(deepDataAndEvents, ignoreMethodDoesntExist, textAlt, keepData, opt_attributes, matcherFunction, execResult, dataAndEvents) {
    /** @type {string} */
    var titleTransformString = dataAndEvents.scaleString + "," + dataAndEvents.rotateString;
    return{
      sliceTransformString : "",
      lineTransformString : "",
      titleTransformString : titleTransformString
    };
  }, this;
};
/**
 * @return {?}
 */
sliceTransformCustomization = function() {
  return this.scaleString = "s1", this.rotateString = "r0", this;
};
/**
 * @param {Object} dataAndEvents
 * @return {?}
 */
spreader = function(dataAndEvents) {
  var res;
  var pos;
  if (this.wheelnav = dataAndEvents, this.wheelnav.spreaderEnable) {
    this.spreaderHelper = new pathHelper;
    this.spreaderHelper.centerX = this.wheelnav.centerX;
    this.spreaderHelper.centerY = this.wheelnav.centerY;
    this.spreaderHelper.navItemCount = this.wheelnav.navItemCount;
    this.spreaderHelper.navAngle = this.wheelnav.navAngle;
    this.spreaderHelper.wheelRadius = this.wheelnav.spreaderRadius;
    this.spreaderHelper.startAngle = this.wheelnav.spreaderStartAngle;
    this.spreaderHelper.sliceAngle = this.wheelnav.spreaderSliceAngle;
    res = this.wheelnav;
    /** @type {string} */
    this.animateeffect = "bounce";
    /** @type {number} */
    this.animatetime = 1500;
    if (this.wheelnav.animateeffect !== null) {
      this.animateeffect = this.wheelnav.animateeffect;
    }
    if (this.wheelnav.animatetime !== null) {
      this.animatetime = this.wheelnav.animatetime;
    }
    /** @type {({font: ??}|{font: string})} */
    this.fontAttr = this.wheelnav.spreaderTitleFont !== null ? {
      font : this.wheelnav.spreaderTitleFont
    } : {
      font : "100 32px Impact, Charcoal, sans-serif"
    };
    this.spreaderPathIn = this.wheelnav.spreaderPathFunction(this.spreaderHelper, this.wheelnav.spreaderInPercent, this.wheelnav.spreaderPathCustom);
    this.spreaderPathOut = this.wheelnav.spreaderPathFunction(this.spreaderHelper, this.wheelnav.spreaderOutPercent, this.wheelnav.spreaderPathCustom);
    pos = this.spreaderPathOut;
    if (res.initPercent < res.maxPercent) {
      pos = this.spreaderPathIn;
    }
    this.spreaderPath = this.wheelnav.raphael.path(pos.spreaderPathString);
    this.spreaderPath.attr(res.spreaderPathAttr);
    this.spreaderPath.id = res.getSpreaderId();
    this.spreaderPath.node.id = this.spreaderPath.id;
    this.spreaderPath.click(function() {
      //res.spreadWheel();
    });
    this.inTitleWidth = this.wheelnav.spreaderInTitleWidth;
    this.inTitleHeight = this.wheelnav.spreaderInTitleHeight;
    this.outTitleWidth = this.wheelnav.spreaderOutTitleWidth;
    this.outTitleHeight = this.wheelnav.spreaderOutTitleHeight;
    if (this.inTitleWidth !== null) {
      if (this.inTitleHeight === null) {
        this.inTitleHeight = this.inTitleWidth;
      }
    }
    if (this.inTitleWidth === null) {
      if (this.inTitleHeight !== null) {
        this.inTitleWidth = this.inTitleHeight;
      }
    }
    if (this.outTitleWidth !== null) {
      if (this.outTitleHeight === null) {
        this.outTitleHeight = this.outTitleWidth;
      }
    }
    if (this.outTitleWidth === null) {
      if (this.outTitleHeight !== null) {
        this.outTitleWidth = this.outTitleHeight;
      }
    }
    if (wheelnavTitle().isImageTitle(this.wheelnav.spreaderOutTitle)) {
      if (this.inTitleWidth === null) {
        /** @type {number} */
        this.inTitleWidth = 32;
      }
      if (this.inTitleHeight === null) {
        /** @type {number} */
        this.inTitleHeight = 32;
      }
      if (this.outTitleWidth === null) {
        /** @type {number} */
        this.outTitleWidth = 32;
      }
      if (this.outTitleHeight === null) {
        /** @type {number} */
        this.outTitleHeight = 32;
      }
    }
    inTitle = wheelnavTitle().isPathTitle(this.wheelnav.spreaderInTitle) ? new wheelnavTitle(this.wheelnav.spreaderInTitle, this.wheelnav.raphael.raphael) : new wheelnavTitle(this.wheelnav.spreaderInTitle);
    this.inTitleSizeTransform = inTitle.getTitleSizeTransform(this.inTitleWidth, this.inTitleHeight);
    this.inTitle = inTitle.getTitlePercentAttr(this.spreaderPathIn.titlePosX, this.spreaderPathIn.titlePosY, this.inTitleWidth, this.inTitleHeight);
    outTitle = wheelnavTitle().isPathTitle(this.wheelnav.spreaderOutTitle) ? new wheelnavTitle(this.wheelnav.spreaderOutTitle, this.wheelnav.raphael.raphael) : new wheelnavTitle(this.wheelnav.spreaderOutTitle);
    this.outTitleSizeTransform = outTitle.getTitleSizeTransform(this.outTitleWidth, this.outTitleHeight);
    this.outTitle = outTitle.getTitlePercentAttr(this.spreaderPathOut.titlePosX, this.spreaderPathOut.titlePosY, this.outTitleWidth, this.outTitleHeight);
    var self = this.outTitle;
    var which = this.wheelnav.spreaderTitleOutAttr;
    var width = this.outTitleWidth;
    var height = this.outTitleHeight;
    var t = this.outTitleSizeTransform;
    if (res.initPercent < res.maxPercent) {
      self = this.inTitle;
      which = this.wheelnav.spreaderTitleInAttr;
      width = this.inTitleWidth;
      height = this.inTitleHeight;
      t = this.inTitleSizeTransform;
    }
    this.spreaderTitle = wheelnavTitle().isPathTitle(this.wheelnav.spreaderOutTitle) ? res.raphael.path(self.path) : wheelnavTitle().isImageTitle(this.wheelnav.spreaderOutTitle) ? this.wheelnav.raphael.image(self.src, pos.titlePosX - width / 2, pos.titlePosY - height / 2, width, height) : res.raphael.text(pos.titlePosX, pos.titlePosY, self.title);
    this.spreaderTitle.attr(this.fontAttr);
    this.spreaderTitle.attr(which);
    this.spreaderTitle.attr({
      transform : t
    });
    this.spreaderTitle.id = res.getSpreaderTitleId();
    this.spreaderTitle.node.id = this.spreaderTitle.id;
    this.spreaderTitle.click(function() {
      //res.spreadWheel();
    });
    this.setCurrentTransform();
  }
  return this;
};
/**
 * @param {boolean} recurring
 * @return {undefined}
 */
spreader.prototype.setCurrentTransform = function(recurring) {
  if (this.wheelnav.spreaderEnable) {
    if (recurring === undefined || recurring === false) {
      currentPath = this.wheelnav.currentPercent > this.wheelnav.minPercent ? this.spreaderPathOut.spreaderPathString : this.spreaderPathIn.spreaderPathString;
      spreaderTransformAttr = {
        path : currentPath
      };
      this.spreaderPath.animate(spreaderTransformAttr, this.animatetime, this.animateeffect);
      var self;
      var me;
      var t;
      if (this.wheelnav.currentPercent === this.wheelnav.maxPercent) {
        self = this.outTitle;
        me = this.wheelnav.spreaderTitleOutAttr;
        this.spreaderPath.attr(this.wheelnav.spreaderPathOutAttr);
        t = this.outTitleSizeTransform;
      } else {
        self = this.inTitle;
        me = this.wheelnav.spreaderTitleInAttr;
        this.spreaderPath.attr(this.wheelnav.spreaderPathInAttr);
        t = this.inTitleSizeTransform;
      }
      if (wheelnavTitle().isPathTitle(self.title)) {
        me.path = self.path;
        me.transform = t;
      } else {
        if (wheelnavTitle().isImageTitle(self.title)) {
          me.x = self.x;
          me.y = self.y;
          me.width = self.width;
          me.height = self.height;
          this.spreaderTitle.attr({
            src : self.src
          });
        } else {
          /** @type {number} */
          offYOffset = 0;
          if (self.title === "-") {
            /** @type {number} */
            offYOffset = 3;
          }
          me.x = self.x;
          /** @type {number} */
          me.y = self.y - offYOffset;
          if (self.title !== null) {
            this.spreaderTitle.attr({
              text : self.title
            });
          }
        }
      }
      this.spreaderTitle.animate(me, this.animatetime, this.animateeffect);
    }
    this.spreaderPath.toFront();
    this.spreaderTitle.toFront();
  }
};
/**
 * @return {?}
 */
spreaderPath = function() {
  return this.NullSpreader = function(jQuery, dataAndEvents) {
    return dataAndEvents === null && (dataAndEvents = new spreaderPathCustomization), jQuery.setBaseValue(dataAndEvents.spreaderPercent, dataAndEvents), {
      spreaderPathString : "",
      titlePosX : jQuery.titlePosX,
      titlePosY : jQuery.titlePosY
    };
  }, this.PieSpreaderCustomization = function() {
    var spreaderRadius = new spreaderPathCustomization;
    return spreaderRadius.spreaderRadius = 25, spreaderRadius.arcBaseRadiusPercent = 1, spreaderRadius.arcRadiusPercent = 1, spreaderRadius.startRadiusPercent = 0, spreaderRadius;
  }, this.PieSpreader = function(_this, dataAndEvents, deepDataAndEvents) {
    if (deepDataAndEvents === null) {
      deepDataAndEvents = PieSpreaderCustomization();
    }
    _this.setBaseValue(deepDataAndEvents.spreaderPercent * dataAndEvents, deepDataAndEvents);
    /** @type {number} */
    var camelKey = _this.sliceRadius * deepDataAndEvents.arcBaseRadiusPercent;
    /** @type {number} */
    var instance = _this.sliceRadius * deepDataAndEvents.arcRadiusPercent;
    return spreaderPathString = [], _this.StartSpreader(spreaderPathString, _this.startAngle, camelKey), spreaderPathString.push(_this.ArcTo(instance, _this.middleAngle, camelKey)), spreaderPathString.push(_this.ArcTo(instance, _this.endAngle, camelKey)), spreaderPathString.push(_this.Close()), {
      spreaderPathString : spreaderPathString,
      titlePosX : _this.titlePosX,
      titlePosY : _this.titlePosY
    };
  }, this.StarSpreaderCustomization = function() {
    var minRadiusPercent = new spreaderPathCustomization;
    return minRadiusPercent.minRadiusPercent = 0.5, minRadiusPercent;
  }, this.StarSpreader = function(d, dataAndEvents, deepDataAndEvents) {
    if (deepDataAndEvents === null) {
      deepDataAndEvents = StarSpreaderCustomization();
    }
    d.setBaseValue(deepDataAndEvents.spreaderPercent * dataAndEvents, deepDataAndEvents);
    /** @type {number} */
    rbase = d.wheelRadius * deepDataAndEvents.spreaderPercent * deepDataAndEvents.minRadiusPercent * dataAndEvents;
    r = d.sliceRadius;
    /** @type {Array} */
    spreaderPathString = [];
    /** @type {number} */
    sliceAngle = d.sliceAngle / d.navItemCount;
    baseAngle = d.navAngle;
    if (d.endAngle - d.startAngle < 360) {
      baseAngle = d.startAngle;
    }
    d.StartSpreader(spreaderPathString, baseAngle, r);
    /** @type {number} */
    var i = 0;
    for (;i < d.navItemCount;i++) {
      startAngle = i * sliceAngle + (baseAngle + sliceAngle / 2);
      middleAngle = startAngle + sliceAngle / 2;
      endAngle = startAngle + sliceAngle;
      if (d.endAngle - d.startAngle < 360) {
        if (i === d.navItemCount - 1) {
          endAngle = middleAngle;
        }
      }
      spreaderPathString.push(d.LineTo(startAngle, rbase));
      spreaderPathString.push(d.LineTo(middleAngle, r));
      spreaderPathString.push(d.LineTo(endAngle, rbase));
    }
    return spreaderPathString.push(d.Close()), {
      spreaderPathString : spreaderPathString,
      titlePosX : d.titlePosX,
      titlePosY : d.titlePosY
    };
  }, this.AntiStarSpreaderCustomization = function() {
    var minRadiusPercent = new spreaderPathCustomization;
    return minRadiusPercent.minRadiusPercent = 0.21, minRadiusPercent;
  }, this.AntiStarSpreader = function(d, dataAndEvents, deepDataAndEvents) {
    if (deepDataAndEvents === null) {
      deepDataAndEvents = AntiStarSpreaderCustomization();
    }
    d.setBaseValue(deepDataAndEvents.spreaderPercent * dataAndEvents, deepDataAndEvents);
    /** @type {number} */
    rbase = d.wheelRadius * deepDataAndEvents.spreaderPercent * deepDataAndEvents.minRadiusPercent * dataAndEvents;
    r = d.sliceRadius;
    /** @type {Array} */
    spreaderPathString = [];
    /** @type {number} */
    sliceAngle = d.sliceAngle / d.navItemCount;
    baseAngle = d.navAngle;
    if (d.endAngle - d.startAngle < 360) {
      baseAngle = d.startAngle;
      d.StartSpreader(spreaderPathString, baseAngle, rbase);
    } else {
      spreaderPathString.push(d.MoveTo(d.startAngle + (d.navAngle + sliceAngle / 2), rbase));
    }
    /** @type {number} */
    var i = 0;
    for (;i < d.navItemCount;i++) {
      startAngle = i * sliceAngle + (baseAngle + sliceAngle / 2);
      middleAngle = startAngle + sliceAngle / 2;
      endAngle = startAngle + sliceAngle;
      if (d.endAngle - d.startAngle < 360) {
        if (i === d.navItemCount - 1) {
          endAngle = middleAngle;
        }
      }
      spreaderPathString.push(d.LineTo(startAngle, r));
      spreaderPathString.push(d.LineTo(middleAngle, rbase));
      spreaderPathString.push(d.LineTo(endAngle, r));
    }
    return spreaderPathString.push(d.Close()), {
      spreaderPathString : spreaderPathString,
      titlePosX : d.titlePosX,
      titlePosY : d.titlePosY
    };
  }, this.FlowerSpreaderCustomization = function() {
    var options = new spreaderPathCustomization;
    return options.minRadiusPercent = 0.63, options.menuRadius = 7, options;
  }, this.FlowerSpreader = function(d, dataAndEvents, deepDataAndEvents) {
    if (deepDataAndEvents === null) {
      deepDataAndEvents = FlowerSpreaderCustomization();
    }
    d.setBaseValue(deepDataAndEvents.spreaderPercent * dataAndEvents, deepDataAndEvents);
    /** @type {number} */
    rbase = d.wheelRadius * deepDataAndEvents.spreaderPercent * deepDataAndEvents.minRadiusPercent * dataAndEvents;
    r = d.sliceRadius;
    /** @type {Array} */
    spreaderPathString = [];
    /** @type {number} */
    sliceAngle = d.sliceAngle / d.navItemCount;
    baseAngle = d.navAngle;
    if (d.endAngle - d.startAngle < 360) {
      baseAngle = d.startAngle;
      d.StartSpreader(spreaderPathString, baseAngle, rbase);
    } else {
      spreaderPathString.push(d.MoveTo(d.startAngle + (d.navAngle + sliceAngle / 2), rbase));
    }
    /** @type {number} */
    var i = 0;
    for (;i < d.navItemCount;i++) {
      startAngle = i * sliceAngle + (baseAngle + sliceAngle / 2);
      middleAngle = startAngle + sliceAngle / 2;
      endAngle = startAngle + sliceAngle;
      if (d.endAngle - d.startAngle < 360) {
        if (i === 0) {
          spreaderPathString.push(d.ArcTo(deepDataAndEvents.menuRadius, startAngle, rbase));
        }
        if (i === d.navItemCount - 1) {
          endAngle = middleAngle;
        }
      } else {
        spreaderPathString.push(d.LineTo(startAngle, rbase));
      }
      spreaderPathString.push(d.ArcTo(deepDataAndEvents.menuRadius, endAngle, rbase));
    }
    return spreaderPathString.push(d.Close()), {
      spreaderPathString : spreaderPathString,
      titlePosX : d.titlePosX,
      titlePosY : d.titlePosY
    };
  }, this.HolderSpreaderCustomization = function() {
    var options = new spreaderPathCustomization;
    return options.minRadiusPercent = 0.5, options.menuRadius = 37, options;
  }, this.HolderSpreader = function(d, ky, node) {
    if (node === null) {
      node = HolderSpreaderCustomization();
    }
    d.setBaseValue(node.spreaderPercent * ky, node);
    /** @type {number} */
    rbase = d.wheelRadius * node.spreaderPercent * node.minRadiusPercent * ky;
    r = d.sliceRadius;
    /** @type {Array} */
    spreaderPathString = [];
    /** @type {number} */
    sliceAngle = d.sliceAngle / d.navItemCount;
    baseAngle = d.navAngle;
    if (d.endAngle - d.startAngle < 360) {
      baseAngle = d.startAngle;
      d.StartSpreader(spreaderPathString, baseAngle, rbase);
    } else {
      spreaderPathString.push(d.MoveTo(d.startAngle + (d.navAngle + sliceAngle / 2), rbase));
    }
    /** @type {number} */
    var i = 0;
    for (;i < d.navItemCount;i++) {
      startAngle = i * sliceAngle + (baseAngle + sliceAngle / 2);
      middleAngle = startAngle + sliceAngle / 4;
      endAngle = startAngle + sliceAngle;
      if (d.endAngle - d.startAngle < 360) {
        if (i === d.navItemCount - 1) {
          endAngle = middleAngle;
        }
      } else {
        spreaderPathString.push(d.LineTo(startAngle, rbase));
      }
      spreaderPathString.push(d.LineTo(startAngle, r));
      spreaderPathString.push(d.ArcBackTo(node.menuRadius, middleAngle, rbase));
      spreaderPathString.push(d.ArcTo(node.menuRadius, endAngle, r));
    }
    return spreaderPathString.push(d.Close()), {
      spreaderPathString : spreaderPathString,
      titlePosX : d.titlePosX,
      titlePosY : d.titlePosY
    };
  }, this.LineSpreaderCustomization = function() {
    var minRadiusPercent = new spreaderPathCustomization;
    return minRadiusPercent.minRadiusPercent = 0.5, minRadiusPercent;
  }, this.LineSpreader = function(d, dataAndEvents, deepDataAndEvents) {
    if (deepDataAndEvents === null) {
      deepDataAndEvents = LineSpreaderCustomization();
    }
    d.setBaseValue(deepDataAndEvents.spreaderPercent * dataAndEvents, deepDataAndEvents);
    /** @type {number} */
    rbase = d.wheelRadius * deepDataAndEvents.spreaderPercent * deepDataAndEvents.minRadiusPercent * dataAndEvents;
    r = d.sliceRadius;
    /** @type {Array} */
    spreaderPathString = [];
    /** @type {number} */
    sliceAngle = d.sliceAngle / d.navItemCount;
    baseAngle = d.navAngle;
    if (d.endAngle - d.startAngle < 360) {
      baseAngle = d.startAngle;
    }
    spreaderPathString.push(d.MoveTo(baseAngle + sliceAngle / 2, r));
    /** @type {number} */
    var i = 0;
    for (;i < d.navItemCount;i++) {
      startAngle = i * sliceAngle + (baseAngle + sliceAngle / 2);
      endAngle = startAngle + sliceAngle;
      if (d.navItemCount === 2) {
        endAngle -= 90;
      }
      spreaderPathString.push(d.LineTo(startAngle, r));
      spreaderPathString.push(d.LineTo(endAngle, r));
    }
    return spreaderPathString.push(d.Close()), {
      spreaderPathString : spreaderPathString,
      titlePosX : d.titlePosX,
      titlePosY : d.titlePosY
    };
  }, this;
};
/**
 * @param {Object} mWidth
 * @return {?}
 */
marker = function(mWidth) {
  return this.wheelnav = mWidth, this.wheelnav.markerEnable && (this.markerHelper = new pathHelper, this.markerHelper.centerX = this.wheelnav.centerX, this.markerHelper.centerY = this.wheelnav.centerY, this.markerHelper.navItemCount = this.wheelnav.navItemCount, this.markerHelper.navAngle = this.wheelnav.navAngle, this.markerHelper.wheelRadius = this.wheelnav.wheelRadius * this.wheelnav.maxPercent, this.markerHelper.sliceAngle = this.wheelnav.navItems[0].sliceAngle, this.markerHelper.startAngle = 
  this.markerHelper.navAngle - this.markerHelper.sliceAngle / 2, this.animateeffect = "bounce", this.animatetime = 1500, this.wheelnav.animateeffect !== null && (this.animateeffect = this.wheelnav.animateeffect), this.wheelnav.animatetime !== null && (this.animatetime = this.wheelnav.animatetime), this.markerPathMin = this.wheelnav.markerPathFunction(this.markerHelper, this.wheelnav.minPercent, this.wheelnav.markerPathCustom), this.markerPathMax = this.wheelnav.markerPathFunction(this.markerHelper, 
  this.wheelnav.maxPercent, this.wheelnav.markerPathCustom), this.marker = this.wheelnav.raphael.path(this.markerPathMax.markerPathString), this.marker.attr(this.wheelnav.markerAttr), this.marker.id = this.wheelnav.getMarkerId(), this.marker.node.id = this.marker.id), this;
};
/**
 * @param {boolean} recurring
 * @return {undefined}
 */
marker.prototype.setCurrentTransform = function(recurring) {
  var cwd;
  var dstUri;
  if (this.wheelnav.markerEnable) {
    /** @type {string} */
    cwd = "";
    cwd = this.wheelnav.currentPercent === this.wheelnav.maxPercent ? this.markerPathMax.markerPathString : this.markerPathMin.markerPathString;
    if (recurring !== undefined) {
      /** @type {number} */
      dstUri = recurring - this.markerHelper.navAngle;
      markerTransformAttr = {
        transform : "r," + dstUri.toString() + "," + this.wheelnav.centerX + "," + this.wheelnav.centerY,
        path : cwd
      };
    } else {
      markerTransformAttr = {
        path : cwd
      };
    }
    this.marker.animate(markerTransformAttr, this.animatetime, this.animateeffect);
    this.marker.toFront();
  }
};
/**
 * @return {?}
 */
markerPath = function() {
  return this.NullMarker = function(dataAndEvents, isXML) {
    return isXML === null && (isXML = new markerPathCustomization), dataAndEvents.setBaseValue(isXML), {
      markerPathString : "",
      titlePosX : dataAndEvents.titlePosX,
      titlePosY : dataAndEvents.titlePosY
    };
  }, this.TriangleMarkerCustomization = function() {
    var arcBaseRadiusPercent = new markerPathCustomization;
    return arcBaseRadiusPercent.arcBaseRadiusPercent = 1.09, arcBaseRadiusPercent.arcRadiusPercent = 1.2, arcBaseRadiusPercent.startRadiusPercent = 0, arcBaseRadiusPercent;
  }, this.TriangleMarker = function(d, dataAndEvents, deepDataAndEvents) {
    if (deepDataAndEvents === null) {
      deepDataAndEvents = TriangleMarkerCustomization();
    }
    d.setBaseValue(deepDataAndEvents.markerPercent * dataAndEvents, deepDataAndEvents);
    /** @type {number} */
    var q = d.sliceRadius * deepDataAndEvents.arcBaseRadiusPercent;
    /** @type {number} */
    var camelKey = d.sliceRadius * deepDataAndEvents.arcRadiusPercent;
    var d2 = d.startAngle + d.sliceAngle * 0.46;
    var buf = d.startAngle + d.sliceAngle * 0.54;
    return markerPathString = [d.MoveTo(d.navAngle, q), d.LineTo(d2, camelKey), d.LineTo(buf, camelKey), d.Close()], {
      markerPathString : markerPathString,
      titlePosX : d.titlePosX,
      titlePosY : d.titlePosY
    };
  }, this.PieLineMarkerCustomization = function() {
    var sliceAngle = new markerPathCustomization;
    return sliceAngle.arcBaseRadiusPercent = 1, sliceAngle.arcRadiusPercent = 1, sliceAngle.startRadiusPercent = 0, sliceAngle.sliceAngle = null, sliceAngle;
  }, this.PieLineMarker = function(_this, dataAndEvents, deepDataAndEvents) {
    if (deepDataAndEvents === null) {
      deepDataAndEvents = PieLineMarkerCustomization();
    }
    _this.setBaseValue(deepDataAndEvents.markerPercent * dataAndEvents, deepDataAndEvents);
    /** @type {number} */
    var message = _this.sliceRadius * deepDataAndEvents.arcBaseRadiusPercent;
    /** @type {number} */
    var camelKey = _this.sliceRadius * deepDataAndEvents.arcRadiusPercent;
    return deepDataAndEvents.sliceAngle !== null && (_this.startAngle = _this.navAngle - deepDataAndEvents.sliceAngle / 2, _this.endAngle = _this.navAngle + deepDataAndEvents.sliceAngle / 2), markerPathString = [_this.MoveTo(_this.startAngle, message), _this.ArcTo(camelKey, _this.endAngle, message), _this.ArcBackTo(camelKey, _this.startAngle, message), _this.Close()], {
      markerPathString : markerPathString,
      titlePosX : _this.titlePosX,
      titlePosY : _this.titlePosY
    };
  }, this.MenuMarkerCustomization = function() {
    var options = new markerPathCustomization;
    return options.menuRadius = 40, options.titleRadiusPercent = 0.63, options.lineBaseRadiusPercent = 0, options;
  }, this.MenuMarker = function(points, dataAndEvents, deepDataAndEvents) {
    if (deepDataAndEvents === null) {
      deepDataAndEvents = MenuMarkerCustomization();
    }
    points.setBaseValue(deepDataAndEvents.markerPercent * dataAndEvents, deepDataAndEvents);
    x = points.centerX;
    y = points.centerY;
    /** @type {number} */
    points.titleRadius = points.wheelRadius * deepDataAndEvents.titleRadiusPercent * dataAndEvents;
    points.setTitlePos();
    /** @type {number} */
    var titlePosX = deepDataAndEvents.menuRadius * dataAndEvents;
    return dataAndEvents <= 0.05 && (titlePosX = 11), middleTheta = points.middleTheta, markerPathString = [["M", points.titlePosX - titlePosX * Math.cos(middleTheta), points.titlePosY - titlePosX * Math.sin(middleTheta)], ["A", titlePosX, titlePosX, 0, 0, 1, points.titlePosX + titlePosX * Math.cos(middleTheta), points.titlePosY + titlePosX * Math.sin(middleTheta)], ["A", titlePosX, titlePosX, 0, 0, 1, points.titlePosX - titlePosX * Math.cos(middleTheta), points.titlePosY - titlePosX * Math.sin(middleTheta)], 
    ["z"]], {
      markerPathString : markerPathString,
      titlePosX : points.titlePosX,
      titlePosY : points.titlePosY
    };
  }, this.LineMarkerCustomization = function() {
    var arcBaseRadiusPercent = new markerPathCustomization;
    return arcBaseRadiusPercent.arcBaseRadiusPercent = 1.05, arcBaseRadiusPercent.arcRadiusPercent = 1.2, arcBaseRadiusPercent.startRadiusPercent = 0, arcBaseRadiusPercent;
  }, this.LineMarker = function(f, dataAndEvents, deepDataAndEvents) {
    if (deepDataAndEvents === null) {
      deepDataAndEvents = LineMarkerCustomization();
    }
    f.setBaseValue(deepDataAndEvents.markerPercent * dataAndEvents, deepDataAndEvents);
    /** @type {number} */
    var row = f.sliceRadius * deepDataAndEvents.arcBaseRadiusPercent;
    /** @type {number} */
    var camelKey = f.sliceRadius * deepDataAndEvents.arcRadiusPercent;
    return markerPathString = [f.MoveTo(f.navAngle, row), f.LineTo(f.navAngle, camelKey), f.Close()], {
      markerPathString : markerPathString,
      titlePosX : f.titlePosX,
      titlePosY : f.titlePosY
    };
  }, this.DropMarkerCustomization = function() {
    var dropBaseRadiusPercent = new markerPathCustomization;
    return dropBaseRadiusPercent.dropBaseRadiusPercent = 0, dropBaseRadiusPercent.dropRadiusPercent = 0.15, dropBaseRadiusPercent;
  }, this.DropMarker = function(d, dataAndEvents, deepDataAndEvents) {
    if (deepDataAndEvents === null) {
      deepDataAndEvents = DropMarkerCustomization();
    }
    d.setBaseValue(deepDataAndEvents.markerPercent * dataAndEvents, deepDataAndEvents);
    /** @type {number} */
    var q = d.sliceRadius * deepDataAndEvents.dropBaseRadiusPercent;
    var d2 = d.startAngle + d.sliceAngle * 0.2;
    var b = d.startAngle;
    var buf = d.startAngle + d.sliceAngle * 0.8;
    var k = d.startAngle + d.sliceAngle;
    /** @type {number} */
    var a = d.sliceRadius * deepDataAndEvents.dropRadiusPercent;
    return markerPathString = [d.MoveTo(0, a), d.ArcTo(a, 180, a), d.ArcTo(a, 360, a), d.MoveTo(d.navAngle, q), d.LineTo(d2, a), d.LineTo(b, a), d.LineTo(d.navAngle, a * 1.6), d.LineTo(k, a), d.LineTo(buf, a), d.Close()], {
      markerPathString : markerPathString,
      titlePosX : d.titlePosX,
      titlePosY : d.titlePosY
    };
  }, this;
};
colorpalette = {
  defaultpalette : ["#2D9E46", "#F5BE41", "#F77604", "#D63C22", "#006BA6", "#92ADAF"],
  purple : ["#4F346B", "#623491", "#9657D6", "#AD74E7", "#CBA3F3"],
  greenred : ["#17B92A", "#FF3D00", "#17B92A", "#FF3D00"],
  greensilver : ["#1F700A", "#79CC3C", "#D4E178", "#E6D5C3", "#AC875D"],
  oceanfive : ["#00A0B0", "#6A4A3C", "#CC333F", "#EB6841", "#EDC951"],
  garden : ["#648A4F", "#2B2B29", "#DF6126", "#FFA337", "#F57C85"],
  gamebookers : ["#FF9900", "#DCDCDC", "#BCBCBC", "#3299BB", "#727272"],
  parrot : ["#D80351", "#F5D908", "#00A3EE", "#929292", "#3F3F3F"],
  pisycholand : ["#FF1919", "#FF5E19", "#FF9F19", "#E4FF19", "#29FF19"],
  makeLOVEnotWAR : ["#2C0EF0", "#B300FF", "#6751F0", "#FF006F", "#8119FF"],
  theworldismine : ["#F21D1D", "#FF2167", "#B521FF", "#7E2AA8", "#000000"],
  fractalloveone : ["#002EFF", "#00FFF7", "#00FF62", "#FFAA00", "#FFF700"],
  fractallovetwo : ["#FF9500", "#FF0000", "#FF00F3", "#AA00FF", "#002EFF"],
  fractallove : ["#002EFF", "#00FFF7", "#00FF62", "#FFAA00", "#F5D908", "#FF0000", "#FF00F3", "#AA00FF"],
  sprinkles : ["#272523", "#FFACAC", "#FFD700", "#00590C", "#08006D"],
  goldenyellow : ["#D8B597", "#8C4006", "#B6690F", "#E3C57F", "#FFEDBE"],
  hotaru : ["#364C4A", "#497C7F", "#92C5C0", "#858168", "#CCBCA5"]
};
